const airtableCourses = [
    {
        "Name": "Mobile Development 2",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Around the world, mobile applications are how most people interact with computers most of the time. In this course, students will extend what they learned in Mobile Development 1, and build more complex and rich mobile applications.\n\nMobile Development 2 builds on the context, tools, and skills for developing mobile applications covered in Mobile Development 1. In the course, students will learn to manage constraints of mobile engineering, such as deploying to multiple devices, handling authentication, secure data storage and networking, and using mobile operating system APIs.\n\nThe course will culminate in a team project, where students will design and build a sophisticated mobile application.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 11,
        "Topics": "- Programming languages and frameworks for mobile development\n- Design constraints and interface patterns common to mobile applications\n- State management, authentication, data storage, and networking techniques for mobile applications\n- Device profiling and performance management",
        "Reading List": "\nSupplemental Reading List:\n- https://infrequently.org/2021/04/progress-delayed/",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 360,
        "Prerequisites (FL)": [
            "recu4kFnoreGC8n4Z"
        ],
        "Reference Classes": "https://www.coursera.org/specializations/app-development\nhttps://www.coursera.org/learn/security\nhttps://www.coursera.org/learn/games",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS360",
        "prereqs": "Mobile Development 1"
    },
    {
        "Name": "Data Engineering",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Data drives more and more software, from social networks to self-driving cars. In order to build applications using that data, engineers design systems to get the data from where it's collected to where it's analyzed and consumed. \n\nThis course bridges what students learn in the Databases and Data Science courses, connecting the theory of data science to the concrete how-to practice of handling data. The course uses the fundamental constraints of processors, storage, and networks -- how fast can data be processed, how much can be stored, and how fast does it move -- as a frame for data engineering decision-making.\n\nStudents will design and build real data pipelines in this course. They'll use a range of industry-standard tools and platforms, and learn to be savvy and scrappy in the tools they choose. Students will learn to test their data pipelines in different ways, including statistical tests, load tests, and monitoring.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 11,
        "Learning Outcomes": "By the end of the course, students will be able to:\n- Recognize and analyze data sources\n- Design and implement a data pipeline\n- Build a data system that aggregates data from different sources for regular analysis\n- Explain the limitations and bottlenecks of different tools and components in a data pipeline",
        "Topics": "- Data sources and uses\n- Memory, Network, and Storage Limitations\n- Data Pipelines and Warehousing\n- Tools for modeling and managing data sources",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 333,
        "Prerequisites (FL)": [
            "rec2xIW81L5hKLAmJ",
            "rechPJzBwGfpUVUZp"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS333",
        "prereqs": "Introduction to Data Science, Databases"
    },
    {
        "Name": "Advanced Algorithms",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Type": "CS",
        "Credit Hours": 4,
        "Reading List": "Core Reading List:\n\nLewis, H. Ideas That Created the Future: Classic Papers of Computer Science\n\nSupplementary Reading List:\n- https://developers.google.com/optimization/\n- https://blog.acolyer.org/\n- https://paperswelove.org/\n- https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-mcsherry.pdf\n- https://www.redblobgames.com/pathfinding/a-star/introduction.html\n",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 405,
        "Prerequisites (FL)": [
            "recatVsEKWOc9bkUT"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS405",
        "prereqs": "Data Structures and Algorithms 2"
    },
    {
        "Name": "Software Engineering",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Most software is developed by people on teams, under time and resource constraints. Software engineering is a set of practices for navigating those constraints and managing the quality of software produced.\n\nThis course covers different topics in Software Engineering, including correctness, software design and refactoring, devops and deployment, and tools and approaches to building software as a team. Students will employ the tools as they build a large team software project, and reflect on how the tools change the way they develop software.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 10,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Use tests and types to reason about the correctness of software programs\n- Communicate about API design quality\n- Refactor code for legibility, testability, and ease of change\n- Set up, configure, and use modern software engineering tools to deploy applications\n- Work as a team to plan and deliver complex, interdependent features\n- Use collaboration, estimation, and planning tools",
        "Topics": "- Correctness with Testing and Types\n- Software architecture and interface design\n- Deployment, Observability and Monitoring\n- Benchmarking and performance\n- Technical communication\n- Planning, estimation, and teamwork",
        "Reading List": "Core Reading List:\nAmy Brown and Greg Wilson, Architecture of Open Source Applications (http://aosabook.org/en/index.html)\n\nSupplemental Reading List:\n\nEngineering:\n- https://www.hillelwayne.com/post/are-we-really-engineers/\n\nSoftware Design\n- Metz, Sandy.  Practical Object Oriented Design, 2nd Edition (2018)\n- https://codecatalog.org/ \n\nDevOps, Deployment, and Monitoring\n- https://www.actionsbyexample.com/\n- https://jvns.ca/blog/2016/10/16/whats-devops/ \n- https://jvns.ca/blog/2016/10/15/operations-for-software-developers-for-beginners/ \n\nTesting and Refactoring\n- Feathers, Michael Working Effectively with Legacy Code\n- Fowler, Martin (2018) Refactoring 2nd Edition\n- Kim, Gene. The Phoenix Project (2013)\n- https://understandlegacycode.com/blog/key-points-of-working-effectively-with-legacy-code/\n- https://refactoring.com/catalog\n\nCorrectness\n- https://users.cs.northwestern.edu/~robby/courses/322-2013-spring/mytkowicz-wrong-data.pdf\n- https://jepsen.io/analyses\n- https://www.learntla.com/introduction/\n- https://fasterthanli.me/articles/aiming-for-correctness-with-types ",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 340,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS340",
        "prereqs": "Programming 2"
    },
    {
        "Name": "Deep Learning",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Type": "CS",
        "Credit Hours": 4,
        "Reading List": "http://neuralnetworksanddeeplearning.com/index.html",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 440,
        "Prerequisites (FL)": [
            "recP4ztOfiJxJEB7O"
        ],
        "Reference Classes": "https://www.fast.ai/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS440",
        "prereqs": "Machine Learning"
    },
    {
        "Name": "Computer Networks",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Type": "CS",
        "Credit Hours": 4,
        "Reading List": "- https://www.computer-networking.info/\n- https://book.systemsapproach.org/foundation.html\n- https://apenwarr.ca/log/20170814\n- https://jvns.ca/blog/2016/12/22/container-networking/",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 403,
        "Prerequisites (FL)": [
            "recmZB7PJgMMQzYHf",
            "recatVsEKWOc9bkUT"
        ],
        "Reference Classes": "https://cseweb.ucsd.edu/classes/fa21/cse124-a/syllabus/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS403",
        "prereqs": "Network and Computer Security, Data Structures and Algorithms 2"
    },
    {
        "Name": "Data Science 2",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "This course builds on what students learn in Introduction to Data Science. Students practice more advanced techniques for managing data sets, using the tools introduced in the first course to handle larger and more complex data.\n\nStudents will learn techniques like clustering and regression to answer questions about what is typical within a data set, and what factors contribute to an outcome. Students will learn to build, test, and deploy explanatory models. The course will also dive deeper into the statistical theory and techniques that power different kinds of data analysis. Students will practice using data to create written, visual, and quantitative explanations.\n\nThe course will touch on advanced topics in data science, like machine learning, natural language processing, and computer vision.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 7,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Find, clean, and wrangle complex datasets\n- Use data science tools to explain phenomena with visual, quantitative, and written descriptions\n- Check the statistical validity and robustness of models",
        "Topics": "Data wrangling\nVisualizing data interactively\nEstimation, Prediction, and Modeling\nClassification\nRanking and Recommendation\nHandling large datasets",
        "Reading List": "https://jvns.ca/blog/2017/04/17/statistics-for-programmers/ ",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 330,
        "Prerequisites (FL)": [
            "rec2xIW81L5hKLAmJ"
        ],
        "Reference Classes": "https://pll.harvard.edu/course/advanced-topics-data-science?delta=0\n",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS330",
        "prereqs": "Introduction to Data Science"
    },
    {
        "Name": "Databases",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "Data is fundamental to modern software. This course explores the technologies software engineers use to store, query, and manipulate data.\n\nStudents will cover topics in relational database management and Structured Query Language (SQL), common to the most popular relational databases. They will learn to model complex relations between different kinds of records, and query those relationships. Students will learn common issues with data modeling that lead to errors, vulnerabilities, and poor performance. They will learn to use tools and techniques for mitigating those problems, such as database constraints, transactions, prepared statements, and indices.\n\nThe course will also cover a selection of topics beyond relational databases, such as NoSQL databases, other languages for working with data, and data architecture. Students will complete coding and analysis exercises and projects, culminating in a large, self-designed data-intensive final project.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 7,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Model and describe data\n- Work with relational databases\n- Explain the performance characteristics and failure modes of data-oriented code\n- Compare different database systems",
        "Topics": "SQL and ORMs\nRelational Modeling, Normalization, and ERDs\nConstraints, Indexes, and Transactions\nMemory, Network, and Storage Limitations\nData Pipelines and Warehousing\nNoSQL systems",
        "Reading List": "Core Reading List:\nWatt, Adrienne Database Design, 2nd Edition\n\nhttps://sqlbolt.com/\n\nhttps://www.awelm.com/posts/simple-db/ and https://github.com/awelm/simpledb\n\nhttps://www.interdb.jp/pg/index.html\nhttp://www.redbook.io/\n\nhttps://github.com/max-sixty/prql and https://github.com/looker-open-source/malloy\n\nhttps://github.com/emichael/dslabs\nhttps://www.hytradboi.com/ ",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 302,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex"
        ],
        "Reference Classes": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-830-database-systems-fall-2010/\n\nhttps://cs.lmu.edu/~ray/classes/db/\nhttps://www.coursera.org/specializations/database-systems\n\nhttps://www.distributedsystemscourse.com/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS302",
        "prereqs": "Programming 2"
    },
    {
        "Name": "Compilers",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "Compilers translate code that programmers write into something else, ultimately, into something that a machine can run. Programmers interact with compilers whenever they run code. This course helps students understand how compilers work, giving them a new toolset for thinking about programming problems in general, and a new perspective on the tools they use daily.\n\nStudents will implement different parts of a compiler, and ultimately an entire compiler for a small language. The course will explore different approaches to compiler design, such as parsers and parser generators, Abstract Syntax Trees, and data representations. By coding compilers by hand, students will practice algorithm implementation and understand in closer detail how certain programming language features work.\n\nNote: Programming Languages is a recommended pre- or co-requisite course, but not required.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 9,
        "Learning Outcomes": "By the end of the course, students will be able to:\n- Explain programming language grammar in terms of syntax and semantics\n- Implement a tokenizer and parser\n- Work with an Abstract Syntax Tree\n- Generate compiled code from a source program\n- Reason about performance and errors in programming language compilation and execution",
        "Topics": "- Programming Language Features, Syntax, and Semantics\n- Tokenizing and Parsing\n- Data Representation\n- Generating Code\n- Abstract Syntax Trees\n- Interpreting and Compiling",
        "Reading List": "https://craftinginterpreters.com/\nhttps://www.infoq.com/presentations/wasi-system-interface/",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 312,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex"
        ],
        "Reference Classes": "https://cs.lmu.edu/~ray/classes/cc/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS312",
        "prereqs": "Programming 2"
    },
    {
        "Name": "Open Source Software",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Collaboratively developed Open Source Software (OSS) creates enormous value for the world. OSS is a social and technical phenomenon, as well as a set of principles and practices for building programs collaboratively. In this course, students will explore the what, how, and why of OSS by getting involved and contributing to open source projects.\n\nAt the start of the course, students will survey open source projects using tools like Github, Bitbucket, and CodeTriage. Each student will choose an open source project to contribute to. Starting with bug replications, documentation improvements, students will familiarize themselves with the project and the tools used by the project. By the end of the course, each student will ship a substantial bug fix or new feature to their chosen project.\n\nThrough their hands-on participation in OSS development, students will learn the social and technical skills involved in building large-scale software projects.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 6,
        "Learning Outcomes": "By the end of the course, students will be able to:\n- Explain the ideas and principles of open source software\n- Collaborate using communication tools common to open source communities, such as Github, Discord, and Twitter\n- Navigate, discuss, and contribute to large, unfamiliar codebases\n- Use programming tools for large collaborative work, like version control, build systems, and bug trackers",
        "Topics": "Open source ethos, tools, and practices\nCollaboration and Community in Software Development\nSoftware licenses\nProgramming in large codebases",
        "Reading List": "Core Reading List\n\nEghbal, Nadia (2020) Working in Public: The Making and Maintenance of Open Source Software",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 240,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex"
        ],
        "Reference Classes": "https://github.com/Seneca-CDOT/topics-in-open-source-2021",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS240",
        "prereqs": "Programming 2"
    },
    {
        "Name": "Digital Logic",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Type": "CS",
        "Credit Hours": 4,
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 261,
        "Prerequisites (FL)": [
            "recxvybmEs3olxX2k"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS261",
        "prereqs": "Discrete Math"
    },
    {
        "Name": "Front End Web Development",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Front End Web Development builds on what students have learned about web technologies in Web Foundations and Web Application Development, extending their familiarity with modern HTML, CSS, JavaScript, and Web APIs. Students learn to develop and deploy client-side web applications with greater scope and complexity. Complex frontend features require using HTML, CSS, and JavaScript together.\n\nStudents deepen their knowledge of the JavaScript language, covering in depth topics like scope and higher order functions. Students practice using modern build tools for package management, bundling, optimization, formatting and linting, and testing.\n\nThroughout the course, students will solve practice exercises and build projects, culminating in a final project using a JavaScript framework to build a complex web application. \n\nStudents will continue to apply technical communication skills by writing technical specs, drafting architecture diagrams, and documenting APIs. They will extend their communication practice through technical blogging on topics like tool comparisons, architecture choices, benchmarks, and frontend web design. Students will grow in independence by reading documentation to learn about novel language and browser features.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 3,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Use a modern js framework to build and deploy a complex web application\n- use advanced features of HTML, CSS, and JavaScript to build and debug features\n- Measure, monitor, and take steps to improve performance of a web application\n- Plan and communicate to work together on web application code",
        "Topics": "- Advanced Topics in HTML, JavaScript, and CSS (web apis, JS scope rules, event system and promises, higher order functions, CSS and Browser object models)\n- Web Frameworks (React, Tailwind)\n- Frontend Tooling: build tools, testing, deployment, typescript\n- Frontend Architecture and performance (CDNs, benchmarking, asset sizes, precompilation and minification strategies)\n- Collaborative feature development",
        "Reading List": "Core Reading List:\nHaverbeke, Marijn. Eloquent JavaScript\n\nSupplementary Reading List:\n\nhttps://reactjs.org/docs/thinking-in-react.html\n",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 204,
        "Prerequisites (FL)": [
            "rec0L0YKqCw2MXwGJ"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS204",
        "prereqs": "Web Application Development"
    },
    {
        "Name": "Mobile Development 1",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Around the world, mobile applications are how most people interact with computers most of the time. In this course, students will learn to design, build, and deploy mobile applications.\n\nStudents will begin the course by setting up their development environment and workflow for writing and packaging mobile apps. Once they have the tools in place, students will learn the basics of the languages, frameworks, and tools necessary to build mobile applications. Students will practice these tools through coding exercises and team projects that go through the entire process of building and shipping a mobile application.\n\nStudents will learn about the constraints of mobile devices, such as storage, bandwidth, connectivity, and the touch screen interface. They will practice the programming techniques and patterns that mobile developers use to create fast, accessible, secure, and beautiful mobile experiences. Students will bring this knowledge to bear on a final project, where they will build, and ship a mobile application of their own design.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 6,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Use build tools to package and run a mobile application\n- Test and debug mobile applications\n- Write mobile applications using industry-standard languages and frameworks\n- Collaborate to build features, using techniques like planning, pair programming, and code review.",
        "Topics": "- Build tools and workflow for mobile development\n- Programming languages and frameworks for mobile development\n- Design constraints and interface patterns common to mobile applications\n- Standard library, framework tools, and commonly used packages for mobile development",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 260,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS260",
        "prereqs": "Programming 2"
    },
    {
        "Name": "Cloud Computing",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Cost structure and availability have shifted a great deal of modern computing to the Cloud. Huge corporations rent time from their vast rows of racks computers, humming away in warehouses around the world. This course teaches students how to use those computing resources.\n\nCloud companies offer hundreds of oddly-named services, so that their clients do not need to rebuild that infrastructure. Students will learn what those services are and how to use them. Students will deploy applications to the cloud, and manage the different aspects of their cloud environment, including security and access roles; monitoring, alerts, and reporting; regions and availability; networking and routing; and tools for managing resources and costs.\n\nNote: This course covers some of the material that students would encounter in a Cloud Certification course, though in a platform-agnostic way. After this course, students should be well-prepared for those certifications if they are interested.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 2,
        "Quarter (sample)": 9,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Explain the basic cloud tools available, and the reasons why and contexts in which developers would choose to use them\n- Set up and document DNS records, application and database servers, and an asset CDN\n- Deploy and configure applications using cloud providers like AWS, Google Cloud, and Microsoft Azure",
        "Topics": "Service Networking: DNS, IP, Routing\nCloud Servers, Cloud Functions, Serverless Computing, Containers\nAuthentication, Authorization, and Security\nCloud tools: Storage, Networking, Analytics, Automation\nDistributed, Global, and Edge Computing\nProviders, Costs, and Scale",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 342,
        "Prerequisites (FL)": [
            "rec6pNgVsMUe57Sna"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (FL)": "CS342",
        "prereqs": "Back End Development"
    },
    {
        "Name": "Benchmarking and Optimization",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Fast programs matter. Speed is a major factor in the user perception of software quality, and a major driver of software costs, power consumption, and network performance. Courses on algorithms and systems cover the underlying theory of software performance. This course focuses on what makes programs slow in practice, and the tools and techniques to speed them up. \n\nThe course provides an overview of the sources slowness across different layers of abstraction in the compute stack. Among these general topics, students will choose a narrower topic area, and focus on understanding the contributing factors to performance within that domain.\n\nThroughout the course, students will profile and benchmark real code, and work with each other to optimize their solutions, whether that means reducing memory allocation, choosing better algorithms, or rearchitecting a system.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 2,
        "Quarter (sample)": 11,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Recognize and explain common sources of application slowness\n- Measure performance characteristics of programs\n- Optimize program performance",
        "Topics": "- Benchmarking, Monitoring, and Profiling\n- Speed and size reference points\n-  Sources of slowness at different levels of abstraction\n- Memory and network performance\n- Practical algorithmic analysis\n- Parallelism, Concurrency, and Contention\n- Debugging approaches for non-performant code",
        "Reading List": "Core Reading List:\n\nArmstrong, T. The Performance of Open Source Applications (https://www.aosabook.org/en/posa/introduction.html)\n\nSupplementary Reading List:\n\nGeneral\n- https://gist.github.com/hellerbarde/2843375\n- https://www.inkandswitch.com/slow-software/\n- https://bradfrost.com/blog/post/performance-as-design/\n- https://jvns.ca/blog/2014/05/12/computers-are-fast/ \n- https://jvns.ca/blog/2018/04/16/new-perf-zine/ \n- https://jvns.ca/blog/2015/09/10/a-millisecond-isnt-fast-and-how-we-fixed-it/ \n\nWeb Performance\n- https://calendar.perfplanet.com/2021/eli5-web-performance-optimization/\n- https://infrequently.org/2022/03/a-unified-theory-of-web-performance/\n- https://infrequently.org/2017/10/can-you-afford-it-real-world-web-performance-budgets/\n- https://calendar.perfplanet.com/2021/\n- https://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/\n\nConcurrency\n- https://jott.live/markdown/mm_wasm\n- https://blog.burntsushi.net/ripgrep/\n- https://jvns.ca/blog/2015/10/31/papers-are-amazing-profiling-threaded-programs-with-coz/\n\nBenchmarking\n- https://jvns.ca/blog/2016/02/20/measuring-cpu-time-with-clock-gettime/\n- https://benchmarksgame-team.pages.debian.net/benchmarksgame/\n- https://jvns.ca/blog/2016/12/03/how-much-memory-is-my-process-using-/ \n- https://renato.athaydes.com/posts/how-to-write-fast-rust-code.html \n- https://www.scattered-thoughts.net/writing/thoughts-on-benchmarking-streaming-systems/ \n\nAlgorithms\n- https://developers.google.com/optimization/ ",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 341,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (FL)": "CS341",
        "prereqs": "Programming 2"
    },
    {
        "Name": "Graphics",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 11,
        "Topics": "Graphics Libraries\nCoordinate Systems, Scaling, Transformation\n2D and 3D Graphics\nCameras, Views, Paths, Projections\nScenes, Textures, and Materials\nShaders, Ray Tracing\nMathematics for Graphics Programming\nDevices, Input, and Interaction",
        "Reading List": "Supplementary Reading Materials:\n- https://www.cs.unm.edu/~angel/BOOK/INTERACTIVE_COMPUTER_GRAPHICS/SEVENTH_EDITION/ \n- https://open.gl/ \n- http://www.opengl-tutorial.org/ \n- https://antongerdelan.net/opengl/ \n- https://raytracing.github.io/\n- https://threejs-journey.com/ \n- https://webglsamples.org/\n- https://webgl2fundamentals.org/\n- https://learnwebgl.brown37.net/ \n- https://math.hws.edu/graphicsbook/index.html \n",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 411,
        "Prerequisites (FL)": [
            "recatVsEKWOc9bkUT",
            "recsLQY3CYADmOtex"
        ],
        "Reference Classes": "https://cs.lmu.edu/~ray/classes/cg/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS411",
        "prereqs": "Data Structures and Algorithms 2, Programming 2"
    },
    {
        "Name": "Communicating For Success",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "Communicating for Success supports students in developing communication skills that are essential for success in their personal and professional lives. The course will focus on close reading, written communication, verbal communication, and non-verbal communication skills. An emphasis will be placed on weekly submissions, and peer and instructor feedback, to allow students to practice and improve their skills.\n\nStudents will learn how to effectively read and analyze texts as a precursor to developing their own written communication skills. They will then practice crafting clear communications by learning about topics such as writing structure and organization, grammar, audience awareness, and the iterative writing process. Next, students move on to verbal communication, and will learn how to confidently and skillfully deliver effective oral presentations. Finally, students will learn about the impact of non-verbal communication on how their messages are received. \n\nThe course will culminate in a project that will require students to develop and implement a strategy for communicating a technical topic to a non-technical audience.",
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 2,
        "Quarter (Woolf plan)": 2,
        "Contact Hours (W)": 25,
        "Self-Study Hours (W)": 25,
        "Assessment Hours (W)": 25,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments - 40%\nMid-term project - 20%\nFinal Essay - 20%\nFinal Project - 20%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 90 minutes\n\nClass size during synchronous session: 50 students\n\nTime spent on prep/homework per week: 3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nUtilize close reading to identify complex ideas and arguments, and distill them into their components, assumptions, and evidence.\nUtilize written, verbal, and non-verbal communication strategies to effectively convey their message to an audience.\nCompose documents with clear organizational structures that enhance their audience’s understanding.\nUse an iterative process to improve the quality of their writing.\nUnderstand the rules of grammar and apply them appropriately to improve the quality of their writing.",
        "Topics": "Close Reading\nWritten Communication\nStructure and Organisation\nGrammar and Writing Conventions\nArgument and Evidence\nAudience Awareness\nWriting Process\nVerbal communication\nPublic Speaking\nPresentation skills\nNon-verbal communication",
        "Reading List": "Core Reading List\nBabin, et al. (2017). The Word on College Reading and Writing. Open Oregon Educational Resources. \nUniversity of Minnesota Libraries Publishing. (2015). Writing for Success. \nKain, P. (1998). How to do a close reading. Writing center at Harvard University.\nBarton, et al. (2019). Exploring Public Speaking. University System of Georgia. \nRamsey, C. (2016). Conventions 101: A Functional Approach to Teaching (and Assessing) Grammar and Punctuation. Oregon Open Educational Resources. \nUniversity of Minnesota Libraries Publishing. (2016). Communication in the Real World: An Introduction to Communication Studies. \nAarts, B. (2017). English Syntax and Argumentation. 5th ed. Red Globe Press.\n\nSupplementary Reading List\nStraus, J., Kaufman, L., Stern, T. (2014). The Blue Book of Grammar and Punctuation. 11th ed. Wiley.\nZobel, J (2005) Writing for Computer Science, second edition, Springer.",
        "Prerequisites (Woolf)": "KC001: Optimizing Your Learning",
        "Prefix (Woolf)": "KC",
        "Prerequisites (FL)": [
            "recGQc4vbLKHk2FdU"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "prereqs": "Optimizing Your Learning"
    },
    {
        "Name": "Computer Architecture",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "Computers are physical devices. Abstraction makes it possible to write software without consideration of the underlying hardware, but software that ignores those details can be subject to pathological performance, security issues, or simply fail to take full advantage of the possibilities of modern hardware.\n\nThis course covers in more detail ",
        "Type": "CS",
        "Credit Hours": 4,
        "Learning Outcomes": "By the end of the course, students will be able to:\n- Explain the layers of abstraction between software and the hardware it runs on\n- Explain different kinds of locality, and analyze how performance could be impacted by locality\n- Analyze the performance characteristics of computer systems based on characteristics like cache policy and cache size\n- Write low-level memory management code",
        "Topics": "Machine Models\nInstruction Set Architecture\nProcessor Pipelining\nMemory Hierarchy\nCaches\nParallelism",
        "Reading List": "Core Reading List:\nHennessy, J. and Patterson, D. Computer Architecture: A Quantitative Approach, 5th Edition\n\nSupplemental Reading List:\nhttps://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html\n",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 310,
        "Prerequisites (FL)": [
            "recWUXPqFrUruI2Ux"
        ],
        "Reference Classes": "- https://inst.eecs.berkeley.edu/~cs61c/su17/\n- https://www.coursera.org/learn/comparch\n- https://www3.nd.edu/~mniemier/teaching/2011_B_Fall/lectures/2010_Final_Exam_Solutions.pdf\n- https://www.usf.edu/engineering/cse/documents/comp-architecture-sample-questions.pdf\n- https://hkn.eecs.berkeley.edu/examfiles/cs152_sp95_mt2_sol.pdf",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS310",
        "prereqs": "Computer Systems"
    },
    {
        "Name": "Probability and Statistics",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Learning Outcomes": "- Use probabilistic and statistical thinking to analyze and explain phenomena of interest\n- Work with mathematical representations of likelihood and conditions\n- Explain the core ideas of probability\n- Use statistics techniques to describe data and test the robustness of claims about data",
        "Topics": "Counting, Permutations, and Combinations\nProbability, Conditional Probability, Independence\nRandom variables\nDistributions\nSampling\nExploratory Data Analysis\nHypothesis Testing and Significance Testing\nBayes Theorem\nLinear Regression\nTheorems and Proofs",
        "Reading List": "https://probability4datascience.com/\nhttps://www.mit.edu/~kircher/ps.pdf\nhttp://bio5495.wustl.edu/Probability/Readings/DeGroot4thEdition.pdf",
        "Elective": true,
        "Math": true,
        "Prefix (FL)": "MNS",
        "Course Number (FL)": 231,
        "Prerequisites (FL)": [
            "recTdEVmuSK0hIl5K"
        ],
        "Reference Classes": "- https://www.coursera.org/learn/introductiontoprobability#syllabus\n- https://www.coursera.org/learn/stanford-statistics\n- https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "MNS231",
        "prereqs": "Mathematical Thinking",
        "Description": "Probability and statistics help people describe phenomena and build models to predict what will happen. They are core mathematical tools for understanding the world, used across scientific and technical disciplines.\n\nThe course will cover the core topics of Probability and Statistics:  counting, sets, permutations, and combinations; probability, independence, and conditional probability; random variables, distributions, and sampling; exploratory data analysis and visualization; and hypothesis testing and significance testing. It may touch on other ideas in probability, such as Bayes's Theorem, Markov Chains, random walks, linear regression, and other techniques in modeling.\n\nThis course frames the theories of probability and statistics as tools to answer practical questions. Counting, permutations, and combinations show up in fields as disparate as forensic accounting and computer security, so the exercises and practice problems draw from concrete examples, instead of pulling marbles from a drawer. Students will also develop critical thinking, communication, and presentation skills by presenting statistical arguments to each other."
    },
    {
        "Name": "Operating Systems",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "This course builds on courses in Computer Systems and Computer Architecture. Operating Systems act as the layer between all applications and the underlying hardware. Learning the details of how operating systems work will help students write faster, safer, more effective application code, or contribute to modern operating system development.\n\nStudents will learn the core abstractions that operating systems provide to programs, like memory, processes, threads, and files. They will use debugging and tracing tools to see how operating system services are called from application code, and write code using those system calls directly. Students will implement pieces of an operating system in order to more deeply understand the problems that operating systems solve and the typical approaches and algorithms used to solve them.\n\nThe course will touch on advanced ideas in operating systems, such as containerization, distributed filesystems, microkernels, fault isolation, and real-time systems. Students will read communications detailing modern operating system development as a window into current topics.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 10,
        "Learning Outcomes": "By the end of the course, students will be able to:\n- Explain the parts of operating systems\n- Analyze the performance of systems based on the properties and algorithms of the operating system\n- Write effective application code using operating system interfaces",
        "Topics": "Virtualization\nResources and Resource Management\nSystem Calls\nConcurrency and Parallelism\nMemory\nPersistence, I/O, File Systems\nSecurityapplication",
        "Reading List": "Core Reading List:\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/\n\nSupplementary Reading List:\n- https://os.phil-opp.com/\n- http://0pointer.de/blog/projects/systemd.html\n- https://systemd-by-example.com/\n- https://jvns.ca/blog/2014/03/12/the-rust-os-story/ ",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 410,
        "Prerequisites (FL)": [
            "recPEesfiKof4772m"
        ],
        "Reference Classes": "https://pdos.csail.mit.edu/6.S081/2021/overview.html",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS410",
        "prereqs": "Computer Architecture"
    },
    {
        "Name": "Cryptography",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "This course extends and mathematically formalizes the ideas introduced in Network and Computer Security. Students will learn the mathematical underpinnings of data privacy and authentication.\n\nSoftware security encompasses social, financial, design, and technological elements. This course focuses on the math underneath the technological aspects of security. Students will learn about probability, randomness, information theory, and how they relate to secrecy.\n\nThroughout the course, students will write code to build and break encryption systems. Students will implement stream and block ciphers, pseudo-random number generators, message authentication codes, and authenticated encryption. Students will make theoretical proofs of unsoundness more concrete by writing code to break misconstructed ciphers.\n\nThe course rounds off with a survey of advanced topics in cryptography, including Diffie-Helman Key Exchange, public key cryptography, elliptic curves, and real world crypto systems.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 9,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Analyze a software model to identify potential security threats\n- Explain what makes a cryptographic construction secure\n- Build and break common (insecure) modes of encryption\n- Implement secure systems using cryptographic primitives",
        "Topics": "- Common security threats and sources of vulnerability\n- Number Theory\n- Security constructions and proofs\n- Block and Stream Ciphers\n- Message Authentication Codes (MACs)\n- Public Key Cryptography",
        "Reading List": "Core Reading List:\n\nBoneh, D and Shoup, V. A Graduate Course in Applied Cryptography.\n\nSupplemental Materials:\nhttps://microcorruption.com/login \nhttps://cryptopals.com/\nhttps://latacora.micro.blog/2018/04/03/cryptographic-right-answers.html\n",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 304,
        "Prerequisites (FL)": [
            "recxvybmEs3olxX2k",
            "recmZB7PJgMMQzYHf"
        ],
        "Reference Classes": "https://www.coursera.org/learn/crypto\nhttps://crypto.stanford.edu/~dabo/courses/OnlineCrypto/ \nhttps://cs.lmu.edu/~ray/classes/ssd/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS304",
        "prereqs": "Discrete Math, Network and Computer Security"
    },
    {
        "Name": "Programming Languages",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "Over the course of their careers, students will encounter dozens of programming languages. This course will give them a foundation for learning those languages quickly, comparing their features, and discussing languages confidently without getting sucked into hype.\n\nStudents will explore programming languages as tools. Different programming languages and programming language paradigms are effective for solving different kinds of problems. Language designers make different tradeoffs and build different features into languages which make them more or less suited for particular kinds of work. Students will practice writing code in the functional and object oriented styles, and they will explore the expressive properties of different kinds of type systems.\n\nTo better understand how the design of languages affects users, students will practice solving problems and building projects in various languages. The course will also touch on the components of programming language design, including compilers, interpreters, tooling, documentation, and community.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Quarter (sample)": 7,
        "Learning Outcomes": "By the end of the course, students will be able to:\n- Explain the differences between major programming language paradigms\n- Write working code in the functional style\n- Write working code using complex type annotations\n- Explain the formal grammar of a language, given its B-N form\n- Work with code written in unfamiliar languages",
        "Topics": "- Programming Language Paradigms\n- Relative Strengths of Programming Languages\n- Representing Grammars\n- Types\n- Object Oriented Programming features\n- Functional Programming features\n- Other programming language features\n- Selected Programming Languages",
        "Reading List": "https://en.wikibooks.org/wiki/Introduction_to_Programming_Languages \nhttps://justine.lol/lambda/\nhttps://beautifulracket.com/ \nhttps://htdp.org/2020-5-6/Book/index.html ",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 311,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex"
        ],
        "Reference Classes": "https://cs.lmu.edu/~ray/classes/pl/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS311",
        "prereqs": "Programming 2"
    },
    {
        "Name": "Cryptography 2",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "This course builds on Cryptography 1, with a focus on public key cryptography and the development of secure protocols.\n\nStudents will engage deeply with the proofs of security or insecurity of cryptographic systems. The course will revisit and extend the number theory relevant to particular cryptographic methods. Students will develop sophisticated crypto systems and exploits, including side-channel and timing attacks.\n\nThroughout the course, students will write practical attacks on a variety of crypto systems. They will also implement cryptographically secure systems, and work together to review and test the security of those systems.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- build secure programs\n- write code to break insecure crypto systems \n- prove the soundness or unsoundness of cryptographic protocols mathematically",
        "Topics": "- Number Theory\n- Public Key Cryptography\n- Diffie Helman Key Exchange\n- RSA\n- Protocols and Security\n- Elliptic Curves\n",
        "Reading List": "Core Reading List:\n\nBoneh, D and Shoup, V. A Graduate Course in Applied Cryptography.\n\nSupplemental Materials:\nhttps://microcorruption.com/login \nhttps://cryptopals.com/\nhttps://latacora.micro.blog/2018/04/03/cryptographic-right-answers.html\n",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 404,
        "Prerequisites (FL)": [
            "recV9UvkCtCwrbNlp"
        ],
        "Reference Classes": "https://www.coursera.org/learn/crypto2?",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS404",
        "prereqs": "Cryptography"
    },
    {
        "Name": "Communicating for Success - Writing",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "Communicating for Success supports students in developing communication skills that are essential for success in their personal and professional lives. The course will focus on close reading and written communication skills. An emphasis will be placed on weekly submissions, and peer and instructor feedback, to allow students to practice and improve their reading and writing skills. Students will learn how to effectively read and analyze texts as a precursor to developing their own written communication skills. They will then practice crafting clear communications by learning about topics such as writing structure and organization, grammar, audience awareness, and the iterative writing process. ",
        "FL": true,
        "Type": "GenEd",
        "Credit Hours": 2,
        "Quarter (Woolf plan)": 2,
        "Quarter (sample)": 2,
        "Sample Degree": true,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 220,
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (FL)": "HSS220"
    },
    {
        "Name": "Communicating for Success - Speaking",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "Communicating for Success supports students in developing communication skills that are essential for success in their personal and professional lives. The course will focus on verbal and non-verbal communication skills. Students will learn how to confidently and skillfully deliver effective oral presentations, and explore the impact of non-verbal communication on how messages are received. An emphasis will be placed on frequent submissions and peer and instructor feedback, to allow students to practice and improve their skills.",
        "FL": true,
        "Type": "GenEd",
        "Credit Hours": 2,
        "Quarter (Woolf plan)": 2,
        "Quarter (sample)": 7,
        "Sample Degree": true,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 221,
        "Prerequisites (FL)": [
            "recvt0zj7nfitJIQg"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (FL)": "HSS221",
        "prereqs": "Communicating for Success - Writing"
    },
    {
        "Name": "African Studies",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "FL": true,
        "Type": "GenEd",
        "Credit Hours": 4,
        "Quarter (sample)": 2,
        "Sample Degree": true,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 208,
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "HSS208"
    },
    {
        "Name": "Ethical Leadership",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "The Leadership Seminar utilizes an action-oriented approach to explore and practice values-based and ethical decision making. Based on the Giving Voices to Values (GVV) framework, students will work in groups to explore ethical quandaries in personal and professional contexts. They will use case studies, in-class discussions, and simulation exercises to analyze and role-play how they would behave in a variety of real-life scenarios. The aim of this course is to help students move beyond a theoretical understanding of ethics, to a practical application of values-based decision making that gives them the tools and practice of acting in line with their values.",
        "FL": true,
        "Type": "GenEd",
        "Credit Hours": 2,
        "Quarter (sample)": 10,
        "Sample Degree": true,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 226,
        "Prerequisites (FL)": [
            "recC3bx87TJ5F114P"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (FL)": "HSS226",
        "prereqs": "Communicating for Success - Speaking"
    },
    {
        "Name": "Creativity and Innovation",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "This course will help students build a practical toolkit to unleash their creative potential. Students will learn and apply creative thinking processes to develop innovative solutions to a range of complex (and not so complex) problems. They will learn a variety of skills including observation, customer interviewing, problem-solving, and rapid prototyping. This course will teach students how to identify problems that are worth solving, while also helping them to develop the skills needed to create innovative solutions. Students will also explore past and current innovations, to learn how and why some innovations succeed, while others fail. ",
        "FL": true,
        "Type": "GenEd",
        "Credit Hours": 2,
        "Quarter (sample)": 6,
        "Sample Degree": true,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 224,
        "Prerequisites (FL)": [
            "recvt0zj7nfitJIQg"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (FL)": "HSS224",
        "prereqs": "Communicating for Success - Writing"
    },
    {
        "Name": "Android App Development",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Android App Development teaches students to develop applications for Android, the most-used mobile platform in the world. Students learn to build with Android Studio and Kotlin, the modern toolkit used for professional Android development. The course prepares students to become professional Android developers. \n\nThe course begins with the fundamentals of Kotlin, the official language for Android development. Students learn its basic syntax, as well its object-oriented programming principles and key language features such as classes, collections, higher-order functions, and extensions. Students then delve into building Android apps, first by exploring layout and how to use common UI components. They learn Activity Lifecycle, and how to monitor and handle app states as users navigate through an app.  Students learn how to create dynamic applications that persist data, and how to use APIs to pass data. The second part of the course covers advanced functionality including animations, notifications, offline caching, and authentication and with Firebase. \n\nStudents learn by building small programming projects. The course culminates in a final group project where students build an Android app of their choice from scratch, going from initial design to deployment in the Play Store. Students will have obtained enough knowledge and have the option to obtain the Associate Android Developer certification offered by Google. ",
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 20,
        "Assessment Hours (W)": 100,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 60%\nClass participation: 10%\nFinal project: 30%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nBuild an application that uses best practices for designing navigation and user interface design\nImplement authentication and identity management using Firebase\nTest and debug Android apps\nDesign and develop an Android app from scratch, and deploy it in Play Store",
        "Topics": "Android dev environment: Kotlin, Android Studio\nUI design\nActivity Lifecycle\nData persistence \nBackground services\nFirebase",
        "Reading List": "Core Reading List\n\nSommerhoff, P. Kotlin for Android App Development. Addison-Wesley Professional\n\nSupplementary Reading List\n\nGoogle Inc. (2021). Android Basics in Kotlin\nGoogle Inc. (2021). Kotlin Bootcamp for Programmers",
        "Prerequisites (Woolf)": "Programming 2\nWeb Application Development\nNetworks & Security",
        "Elective": true,
        "Prefix (Woolf)": "CSE",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80
    },
    {
        "Name": "iOS App Development",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "iOS App Development teaches students to build modern mobile applications using Apple’s iOS development platform and tool chain. It prepares students to become professional iOS developers. Students learn the core principles of the Swift programming language and Apple’s front-end frameworks for creating single and multi-page applications. \n\nThe course begins with an introduction to the Swift programming language and Xcode, Apple’s development environment for iOS. Students learn the core object-oriented programming principles of Swift, its Model/View/Controller paradigm, and its supporting classes. They then learn to create user interfaces with UIKit, Apple’s front-end framework. \n\nThe second part of the course teaches students to create dynamic iOS applications that pass information between views and objects, and respond to user events. Students learn how to incorporate networking into their mobile apps, and how to get and parse information from the internet through APIs. They also learn techniques for creating asynchronous apps, including industry-standard patterns and frameworks to persist data locally and synchronizing data between the local device and the cloud. \n\nStudents learn by building small programming projects.  The course culminates in a final group project where students build an iOS app of their choice from scratch, going from initial design to deployment in the App Store. ",
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 20,
        "Assessment Hours (W)": 100,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 60%\nClass participation: 10%\nFinal project: 30%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDemonstrate an understanding of the fundamentals of Swift, and solve programming problems in Swift\nUse UIKit classes to create dynamic user interfaces\nImplement network requests and retrieve data from external APIs\nTest and debug iOS apps on a Mac \nDesign and develop an iOS app, and deploy it in App Store",
        "Topics": "UIKit\nGrand Central dispatch\nBackground tasks\niOS file system\nCore Data",
        "Reading List": "Core Reading List\n\nApple Inc. (2021). The Swift Programming Language Guide. \n\nSupplementary Reading List\n\nStanford University: CS193p - Developing Apps for iOS",
        "Prerequisites (Woolf)": "Programming 2\nWeb Application Development\nNetworks & Security",
        "Elective": true,
        "Prefix (Woolf)": "CSE",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80
    },
    {
        "Name": "Foundations of Scientific Inquiry",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "Description": "This course helps students develop the skills to effectively formulate and answer questions about the natural and physical world. Students will explore the scientific processes of inquiry, analysis, problem-solving, and quantitative reasoning, through their application in contemporary science and technology. They will learn how to use the scientific method to make evidence-based decisions while analyzing the consequences of poor scientific reasoning in modern society. Students will also explore the interdisciplinary nature of science, with a particular focus on the intersection between the natural sciences and computer science. This course will utilize readings, case studies, simulations, in-class debates, and other experiential activities to help students explore and apply the concepts of scientific inquiry in meaningful contexts.",
        "FL": true,
        "Type": "GenEd",
        "Credit Hours": 4,
        "Quarter (sample)": 1,
        "Sample Degree": true,
        "Prefix (FL)": "MNS",
        "Course Number (FL)": 103,
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "MNS103"
    },
    {
        "Name": "Tech Economics and Finance",
        "Kind": "Theory",
        "Description": "Software is a social technology, and the creation of software usually implies an expected financial reward. This class is about understanding the business of tech. When they say \"software is eating the world\", what do they mean, and why?\n\nThe course will cover topics in business models, strategy, moats, valuations, and what makes technology companies valuable at different stages of growth. Students will learn the typical lifecycle stages of a company, and common approaches to financing that companies use to fund their operations.\n\nStudents will build models from the ground up, estimating the core contributors to costs of different elements of businesses and of industry as a whole. They will write and share technical analysis of tech companies with different models, as a way of building a shared understanding of how money flows in the technology ecosystem.",
        "FL": true,
        "Type": "GenEd",
        "Credit Hours": 2,
        "Quarter (sample)": 5,
        "Topics": "- Business Models and Modeling\n- Strategy: Moats, Flywheels, Network and Agglomeration Effects, Pricing, Brand\n- How funding works, from seed stage to public trading",
        "Reading List": "Strategy\nhttps://www.gwern.net/Complement \nhttps://stratechery.com/concepts/ \nhttps://every.to/napkin-math \nhttps://trends.vc/archives/ \n\nApp Stores\nhttps://infrequently.org/2022/01/carpe-diem/\nhttps://www.ben-evans.com/benedictevans/2021/7/8/app-store",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 361,
        "Prerequisites (FL)": [
            "rec0L0YKqCw2MXwGJ"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (FL)": "CS361",
        "prereqs": "Web Application Development"
    },
    {
        "Name": "Advanced Topics in Computer Science",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "This course focuses on advanced topics in computer science. It will focus on reading classic and current Computer Science papers. Students will implement the ideas from those papers in code to understand the ideas, reproduce the results, and explore the implications.",
        "FL": true,
        "Type": "CS",
        "Credit Hours": 4,
        "Reading List": "Core Reading List:\n\nLewis, H. Ideas That Created the Future: Classic Papers of Computer Science\n\nSupplementary Reading List:\n- https://developers.google.com/optimization/\n- https://blog.acolyer.org/\n- https://paperswelove.org/\n- https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-mcsherry.pdf\n- https://www.redblobgames.com/pathfinding/a-star/introduction.html\n",
        "Elective": true,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 490,
        "Prerequisites (FL)": [
            "recatVsEKWOc9bkUT"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (FL)": "CS490",
        "prereqs": "Data Structures and Algorithms 2"
    },
    {
        "Name": "Industry Experience 1",
        "ECTS Credits": 12,
        "Kind": "Practical",
        "Required": true,
        "Description": "Industry Experience is a form of experiential learning that enables students to apply their academic knowledge in a professional context. Students work to build software that meets the needs of a professional organization by completing either (1) an approved internship, or (2) a product studio. \n\nDuring the internship, students work on tasks that meet the needs of the organization, guided by an on-site supervisor. Internships must entail significant, substantial computer science. In the studio, external clients (e.g., businesses, non-profits) sponsor a software development project completed by students. A typical end result is a prototype of or a fully functional software system ready for use by the clients. These projects are completed by teams of 4-6 students, who meet with the client weekly to share progress and get feedback. \n\nStudents complete online modules under the supervision of a faculty advisor. Pre-work includes instruction in communication, goal-setting, and professional development. During the industry experience, students submit bi-weekly written reflections on their personal goals, challenges, and, for the studio, team feedback. At the end of the term, students obtain written feedback from their organization supervisor.  They also submit a final report which describes the problem statement, approaches/methods used, deliverables, and skills gained. Industry Experience culminates in a final presentation which is shared as a public blog post. ",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 8,
        "Quarter (Woolf plan)": 4,
        "Contact Hours (W)": 280,
        "Self-Study Hours (W)": 40,
        "Assessment Hours (W)": 0,
        "Quarter (sample)": 4,
        "Supervised Placement Hours": 280,
        "Mode of Assessment": "Writing (Individual Learning Plan & Bi-weekly reflections): 25%\nSupervisor/Client evaluation: 25%\nFinal Report & Presentation: 50% ",
        "Hours and Format": "Synchronous class sessions per week:  none\n\nClass size during synchronous session:  N/A\n\nTime spent on prep/homework per week: 2 hours\n\nTimetable format for the exam? N/A\n\nAny workplace experience that needs to be accredited? Yes",
        "Learning Outcomes": "By the end of the course, students will:\n\nApply academic knowledge and skills in new professional settings\nDemonstrate the ability to cope effectively with ambiguous and unfamiliar situations\nDevelop interpersonal and professional skills that allow them to successfully transition to work \nReflect on their personal skills, and identify opportunities for further development \nDemonstrate professional and ethical behavior, and ability to maintain accountability for their commitments",
        "Topics": "Communication \nUpward management\nPersonal branding \nProductivity\nWork-Life Balance\nProject management ",
        "Reading List": "Core reading list\nPersonal Brand Workbook (2015). PricewhaterhouseCoopers\nNortheastern University (2020). Job Search Guide\nBolton, G. and Delderfield, R. (2018). Reflective practice: writing and professional development (5th edition). London: SAGE.\nRollag, K. (2015) Succeed in New Situations. Harvard Business Review \n\n\nSupplementary reading list \nYancy, G. B., Clarkson, C. P., Baxa, J. D., & Clarkson, R. N., (2003). Examples of good and bad interpersonal skills at work. Eye on Psi Chi, 7\nRollag, K. (2015) What to Do When You’re New. AMACOM",
        "Prerequisites (Woolf)": "Programming I\nProgramming II\nWeb Foundations\nWeb Application Development\nData Structures & Algorithms I\nTeam Software Project\nCollaborating for Success\nCommunicating for Impact",
        "Sample Degree": true,
        "Prefix (Woolf)": "IDS",
        "Course Number (Woolf)": 1,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 250,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex",
            "recChaxullpbhT9Os",
            "rec0L0YKqCw2MXwGJ"
        ],
        "Engagement hours (FL)": 80,
        "Prep hours (FL)": 160,
        "Course Code (Woolf)": "IDS001",
        "Course Code (FL)": "CS250",
        "prereqs": "Programming 2, Team Software Project, Web Application Development"
    },
    {
        "Name": "Optimizing Your Learning",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "Optimizing Your Learning aims to transform incoming first year students into effective and empowered self-directed learners.\n\nIn the modern world, long-term academic, professional, and personal success is driven by the ability of individuals to take control of their learning. Therefore, this course helps students to develop the knowledge, skills, and mindsets necessary to take ownership of their learning and build their self-efficacy.\n\nDuring the course, students will develop competence in skills that are most critical for effective self-directed and self-regulated learning (i.e. self-management, self-monitoring, and self-modification), while also learning how to use learning strategies to maximize their overall learning efficiency and efficacy. They will also utilize the Emotional Intelligence framework to explore their identity, self-image, motivation, and self-regulation skills, to support their development as self-directed learners.\n\nThe course culminates in the creation of a personal learning charter that will help guide students in their learning throughout their time at Kibo, which can also be applied to their learning activities in other realms of their lives.",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 2,
        "Quarter (Woolf plan)": 1,
        "Contact Hours (W)": 25,
        "Self-Study Hours (W)": 30,
        "Assessment Hours (W)": 20,
        "Quarter (sample)": 1,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments - 50%\nIndividual essay - 25%\nPresentation - 25%",
        "Hours and Format": "Synchronous class sessions per week:  1 session per week = 90 minutes\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nIdentify and develop skills for self-directed learning.\nDevelop a reflective practice to support deep learning.\nUnderstand and improve their own self-awareness, self-regulation, and motivation.\nAnalyze the ways in which mental models shape how they perceive and engage with the world.\nCreate a personal learning contract.\n",
        "Topics": "Self-Directed Learning and Self-Regulated Learning \nEmotional Intelligence (EQ)\nSelf-Awareness\nSelf-Regulation\nMotivation\nEQ Practices and Frameworks\nReflection and Reflective Practice\nMental Models \nGrowth Mindset\nLearning Strategies Toolkit\nLearning Contracts",
        "Reading List": "Core Reading List\nKwantlen Polytechnic University Learning Centres. (2018). Learning to Learn Online. Surrey, BC: Kwantlen Polytechnic University.\nBariso, J. (2018). EQ Applied: The Real-World Guide to Emotional Intelligence. Borough Hall.\n\nSupplementary Reading List\nGoleman, D. (2005). Emotional Intelligence. Bantam Books.\nAnderson G, Boud D and Sampson J (1996), Learning Contracts – A Practical Guide, Kogan Page, London.\nBolton, G. and Delderfield, R. (2018). Reflective practice: writing and professional development (5th edition). London: SAGE.\nMoon, J.A.. (2006). Learning journals: a handbook for reflective practice and professional development (2nd edition). Abingdon: Routledge.",
        "Sample Degree": true,
        "Prefix (Woolf)": "KC",
        "Course Number (Woolf)": 1,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 100,
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (Woolf)": "KC001",
        "Course Code (FL)": "HSS100"
    },
    {
        "Name": "Web Foundations",
        "ECTS Credits": 3,
        "Kind": "Technical",
        "Required": true,
        "Description": "This course provides a foundation in building for the web. It helps students understand how the internet works, examines the role of the internet in their lives, and teaches them the basics of web development. The course prepares students for the advanced course in Web Application Development. \n\nThe course will cover the building blocks of web application development. Students will learn HTML, intermediate CSS, and the basic concepts and syntax of JavaScript. The course covers a brief history of the internet and network technologies. Students will relate what they learn about the conceptual foundations of the web to the physical underpinnings of the internet. Students will discuss barriers to connectivity, and efforts to expand access, like projects to expand undersea cables and satellite-based internet. They will explore the challenges of internet security and privacy. Students will be encouraged to make these social explorations personal, and investigate the history, barriers, and opportunities for connectivity in their local regions.\n\nThe course culminates in a “Knowledge Share” project during which students create a website to educate a non-technical audience on a key aspect of the internet or emerging technology. ",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 2,
        "Quarter (Woolf plan)": 1,
        "Contact Hours (W)": 25,
        "Self-Study Hours (W)": 30,
        "Assessment Hours (W)": 20,
        "Quarter (sample)": 1,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Class participation (30%) \nWeekly assignments (40%) \nFinal project (30%)",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDescribe the history of the internet, and the role it plays in today’s society\nDescribe the technical design and infrastructure of the internet \nAnalyze the challenges facing internet connectivity in a region of their choice\nBuild a basic website with HTML and CSS\n",
        "Topics": "- History and impact of the Internet \n- Network names and protocols (IP, TCP, DNS)\n- HTML\n- CSS\n- JavaScript\n- Frontend architecture\n- Internet infrastructure (Fiber Optic Cables, Satellite)\n- Security and encryption",
        "Reading List": "Core Reading List\n\nMendez, M (2014). The Missing Link: An Introduction to Web Development and Programming. Open SUNY Textbooks. Ch 1-36 (205pp)\nSeverance, C. (2015) Introduction to Networking (109 pages)\nJames, Oliver (2017), Interneting Is Hard \n\nSupplementary Reading List\nMozilla (2020), Learn Web Development\nPatonnier, J. (2018), Web Demystified. Mozilla Hacks\nCode.Org (2018), How The Internet Works - Playlist \nCode Guide (2013), Standards for developing consistent, flexible, and sustainable HTML and CSS\nPew Research Center and Elon University Imagining the Internet Center, October 28, 2019, “Experts Optimistic About the Next 50 Years of Digital Life”",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 1,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 102,
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (Woolf)": "CSF001",
        "Course Code (FL)": "CS102"
    },
    {
        "Name": "Discrete Math",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "Description": "This course builds on Mathematical Thinking and provides the mathematical foundation needed for many fields of computer science, including data science, machine learning, and software engineering. \n\nIt focuses on core mathematical areas that are essential in the toolkit of every computer scientist: logic, combinatorics and probability, set theory, graph theory, and elementary number theory. Each topic is covered with a focus on applications in modern computer science. It begins with a unit on logic which builds on previous knowledge, with an emphasis on writing readable and precise code. Probability and combinatorics focuses on analysis of algorithms and reliability. There is an in-depth focus on graph theory, and students explore the numerous applications of graph theory in computer science (data mining, clustering, networking, etc.). Finally, the course introduces number theory, beginning with fundamental results such as the Euclidean Algorithm then applications in cryptography. \n\nThe course culminates in a final group project where students explore original mathematical sources, and describe the historical proof techniques of a discrete math topic.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 5,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 40,
        "Quarter (sample)": 3,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nClass participation: 20%\nFinal Project: 30%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\nWrite clear mathematical statements using standard notation and terminology\nPerform operations on discrete structures such as sets, functions, relations or sequences\nDemonstrate mathematical reasoning by constructing proofs using a variety of techniques (direct proofs, contradiction, induction, etc.)\nSolve problems using counting techniques and combinatorics\nCalculate probabilities of events and expectations of random variables",
        "Topics": "Mathematical notation and LaTeX basics\nCounting\nSequences\nInduction, Recursion\nLogic and proofs\nGraphs\nNumber theory",
        "Reading List": "Core Reading List\n\nLevin, Oscar. (2019). Discrete Mathematics: An Open Introduction. (http://discrete.openmathbooks.org/dmoi3/dmoi.html)\n\nSupplementary Reading List\n\nLovasz, L., Vesztergombi, K. (1999). Discrete Mathematics Lecture Notes. Yale University \nLehman, E., Leighton T., Meyer, A. (2015) Mathematics for Computer Science. \n\n- http://math.gordon.edu/ntic/ntic/ntic.html\n- https://crypto.stanford.edu/pbc/notes/numbertheory/book.pdf\n- https://web.mit.edu/rsi/www/pdfs/new-latex.pdf\n- https://web.mit.edu/rsi/www/pdfs/reference-latex.pdf\n- https://discretemath.org/ads/index-ads.html ",
        "Prerequisites (Woolf)": "Mathematical Thinking",
        "Sample Degree": true,
        "Math": true,
        "Prefix (Woolf)": "CSA",
        "Course Number (Woolf)": 1,
        "Prefix (FL)": "MNS",
        "Course Number (FL)": 206,
        "Prerequisites (FL)": [
            "recTdEVmuSK0hIl5K"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSA001",
        "Course Code (FL)": "MNS206",
        "prereqs": "Mathematical Thinking"
    },
    {
        "Name": "Back End Development",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Description": "Back End Development builds on previous knowledge of web development and security, and equips students with knowledge of server-side development so that they can become professional back-end developers and build enterprise-scale applications. Students learn to develop and deploy server-side applications with greater scope and complexity.\n\nIn this project-based course, students deepen their understanding by building the back end for a cross-platform application. The project will require implementing advanced features that add complexity and uniqueness to a server’s structure. Examples of these include payment gateways, chat rooms, full text search, WebSockets, etc. Students will design and build out all of the API endpoints needed for the application and properly secure them for use in any web or mobile front-end application. In doing so, they will explore the differences and tradeoffs between web services, APIs, and microservices. They will learn best practices for code quality including unit testing and error handling. They will also learn to efficiently document their APIs.  \n\nStudents will understand key Developer Operations (DevOps) practices including environment design, testing, development controls, and uptime management. They will implement modern DevOps workflows (e.g., containers, cloud virtual machines), and learn tradeoffs between different approaches. They will set up continuous integration and continuous delivery, and explore various strategies for automated testing and application monitoring. ",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 7,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 20,
        "Assessment Hours (W)": 100,
        "Quarter (sample)": 5,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Projects: 70%\nClass participation: 10%\nFinal presentation: 20%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDescribe and use web services, REST APIs and microservices\nIntegrate unit and integration testing into a back-end system\nImplement containerized environments, and describe the benefits and use cases for them\nIntegrate and use cloud databases services\nExplain CI/CD, and implement and monitor a build pipeline",
        "Topics": "Web services\nREST API development\nGraphQL\nContainers\nDeployment\nCloud Services",
        "Reading List": "Core Reading List\n\nKleppman, M. (2017) Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems. O’Reilly Media\n\nSupplementary Reading List\n\nAndersson E., Greenspun P., Grument, A. (2006). Software Engineering for Internet Applications. MIT Press ",
        "Prerequisites (Woolf)": "Programming 2\nWeb Application Development\nNetworks & Security",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (Woolf)": "CSE",
        "Course Number (Woolf)": 1,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 203,
        "Prerequisites (FL)": [
            "rec0L0YKqCw2MXwGJ"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSE001",
        "Course Code (FL)": "CS203",
        "prereqs": "Web Application Development"
    },
    {
        "Name": "Programming 1",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Required": true,
        "Description": "The course helps students develop an appreciation for programming as a problem solving tool. It teaches students how to think algorithmically and solve problems efficiently, and serves as the foundation for further computer science studies. \n\nUsing a project-based approach, students will learn to manipulate variables, expressions, and statements in Python, and understand functions, loops, and iterations. Students will then dive deep into data structures such as strings, files, lists, dictionaries, and tuples to write complex programs. Over the course of the term, students will learn and apply basic data structures and algorithmic thinking. Finally, the course will explore design and implementation of web apps in Python using the Flask framework. \n\nThroughout the course, students will be exposed to abstraction and will learn a systematic way of constructing solutions to problems. They will work on team projects to practice pair programming, code reviews, and other collaboration methods common to industry. The course culminates in a final group project and presentation during which students demonstrate and reflect on their learning.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 1,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 40,
        "Quarter (sample)": 1,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nMidterm Project: 25%\nFinal Project: 25%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\nDescribe the basics of the Python programming language\nUse variables to store, retrieve and calculate information\nUtilize core programming tools such as functions and loops\nExplain the principles of data structures & how they are used\nApply principles of algorithmic thinking and programming to solve problems\nBuild upon existing code and libraries\nImplement a web application using Flask",
        "Topics": "- What is Programming?\n- Variables, Expressions, and Statements\n- Conditional Execution\n- Loops and Iterations\n- Functions\n- Data structures: strings, files, lists, dictionaries, tuples\n- Python web server: HTML, CSS, Flask",
        "Reading List": "Core Reading List\n\nSeverance, D. C. R. (2016). Python for Everybody: Exploring Data in Python 3. Chapters 1 - 11 (130 pages)\n\nSupplementary Reading List\n\nDowney, A (2015). Think Python, How to Think Like a Computer Scientist. Green Tea Press (209 pp.)\nSweigart, A (2019), Automate the Boring Stuff with Python, 2nd e. No Starch Press. Ch 1-6  (155 pp.)",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 2,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 101,
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF002",
        "Course Code (FL)": "CS101"
    },
    {
        "Name": "Capstone Research Methods",
        "ECTS Credits": 6,
        "Kind": "Practical",
        "Required": true,
        "Description": "The Capstone Research Methods course supports students in developing critical research skills that are needed for the successful completion of their Capstone projects in the final term of their degree.\n\nThe course provides students with an overview of the research process and types of capstone projects that they can undertake, and includes a detailed exploration of relevant quantitative and qualitative research methods.\n\nStudents will develop skills in data gathering and analysis, researching and writing an effective literature review, creating a research proposal, and managing ethical considerations with regards intellectual property rights and research with human subjects.\n\nAt the conclusion of the course, students will be required to submit their formal Capstone project proposal which should include details of their project scope, research question, hypothesis, and project plan. Their proposal must receive a passing mark before they are allowed to undertake the Capstone course in the final term of the degree program.",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 10,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 50,
        "Assessment Hours (W)": 50,
        "Quarter (sample)": 11,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Capstone literature review - 40%\nCapstone project proposal - 60%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 60 minutes\n\nClass size during synchronous session: 50\n\nTime spent on prep/homework per week: 9 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nSource literature relevant to a chosen project using a variety of bibliographic tools. \nCritically analyse literature from a variety of information sources.\nSynthesise new knowledge in their project subject area through a critical evaluation of the literature.\nIdentify and select appropriate qualitative and quantitative research methods for their Capstone project\nUtilize writing skills to develop a project proposal and associated project plan.",
        "Topics": "Research Process\nTypes of Capstone projects\nResearch methods -  Quantitative and Qualitative approaches. \nData Gathering and Analysis Techniques\nLiterature Reviews (research and writing)\nProject Proposals\nEthics - Intellectual Property, Software Protection. Fair use policies, Open Source software\nEthics - Research Involving Human Subjects. ",
        "Reading List": "Kumar R (2010) Research Methodology: A Step by Step Guide for Beginners (3rd Ed), Sage Publishing. \nSharp J A, Peter J, and Howard K (2002) The Management of a Student Research Project (3rd Ed), Gower Publishing.\nCreswell J W (2002) Research Design: Qualitative, Quantitative and Mixed Method Approaches (4th Ed), Sage Publishing. \nZobel, J (2005) Writing for Computer Science, second edition, Springer.",
        "Prerequisites (Woolf)": "Completion of all required CSF00X and CSA00X courses.",
        "Sample Degree": true,
        "Prefix (Woolf)": "IDS",
        "Course Number (Woolf)": 2,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 449,
        "Prerequisites (FL)": [
            "recDmk4qU1jrqyAay"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "IDS002",
        "Course Code (FL)": "CS449",
        "prereqs": "Industry Experience 2"
    },
    {
        "Name": "Computer Systems",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "Description": "This course explores computing beyond software. Students will go a level deeper to better understand the hardware, and see how computers are built and programmed.  It is modeled on the popular project-based “Nand to Tetris” textbook, which walks learners through building a computer from scratch.  It aims to help students become better programmers by teaching the concepts underlying all computer systems. The course integrates many of the topics covered in other computer science courses, including algorithms, computer architecture, operating systems, and software engineering.\n\nStudents will learn how to build a computer system using progressive steps.  The course starts with a brief review of boolean algebra, and an introduction to logic gates. Students design a set of elementary logic gates using a Hardware Description Language. They then build chips to perform arithmetic and logical operations, and build the computer’s main memory unit. Subsequently, students learn to write low-level machine language, and build a CPU to create a fully functional computer system. Finally, students implement a virtual machine, compiler, and basic operating system. Projects are spread out evenly throughout the course, and are completed in pairs.\n\nBy the end of the course, students  will develop a strong understanding of the relationships between the architecture of computers, and software that runs on them.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 5,
        "Contact Hours (W)": 45,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 45,
        "Quarter (sample)": 5,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Projects: 70% - formative\nClass participation: 10%\nFinal project and presentation: 20%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nUnderstand how hardware and software systems are built, and work together\nExplain how key abstraction layers in computers are implemented, and how higher level representations are translated into machine language\nWrite assembler and machine code\nDesign and build a general purpose computer system, including hardware and software, from the ground up",
        "Topics": "Boolean functions and gate logic\nArithmetic Logic Unit\nMemory\nMachine language\nComputer architecture\nAssembler",
        "Reading List": "Core Reading List\n\nNisan, N., Schocken S. (2021). The Elements of Computing Systems, second edition: Building a Modern Computer from First Principles. MIT Press\n\nSupplementary Reading List\nAmoroso, E. Amoroso, M. From Gates to Apps, Silicon Press 2013\n- https://jvns.ca/blog/learn-how-things-work/\n- http://www.bottomupcs.com/\n- https://jvns.ca/blog/2016/09/11/rustconf-keynote/ \n- https://leaningtech.com/webvm-server-less-x86-virtual-machines-in-the-browser/\n",
        "Prerequisites (Woolf)": "Programming 2\nMathematical Thinking",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSA",
        "Course Number (Woolf)": 2,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 210,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex",
            "recTdEVmuSK0hIl5K"
        ],
        "Reference Classes": "https://cs.lmu.edu/~ray/classes/sp/\nhttps://www.adelaide.edu.au/course-outlines/001956/2/sem-2/2018/\n",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSA002",
        "Course Code (FL)": "CS210",
        "prereqs": "Programming 2, Mathematical Thinking"
    },
    {
        "Name": "Data Structures and Algorithms 2",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "Description": "This course builds on Data Structures & Algorithms 1. Students will explore non-linear data structures, and implement and analyze advanced algorithms.\n\nThe course begins with a brief review of basic data structures and algorithms. Students deepen their understanding of searching and sorting, with a focus on describing performance. They learn about advanced data structures including priority queues, hash tables and binary search trees. Students build on their knowledge of graph theory to implement graph algorithms, and explore topics like finding the shortest paths in graphs, and applications of algorithms in maps, social networks, and a host of real-life applications. Other key topics include: divide and conquer, recursion, greedy algorithms, dynamic programming, computability theory, and case studies in algorithm design.\n\nThe course emphasizes big-picture understanding and practical problem-solving in preparation for technical interviews and professional practice. Students will solve common algorithmic problems, and participate in mock interview sessions. Students will write technical blog posts to deepen their understanding of these topics and to practice technical communication.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 6,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 40,
        "Quarter (sample)": 6,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nClass participation: 25% \nFinal Project: 25%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDescribe runtime mathematically, and estimate the runtime of an arbitrary algorithm \nImplement fast retrieval of data from a collection using binary search trees\nImplement and evaluate runtime of a variety of algorithms, including divide-and-conquer, greedy algorithms, and dynamic programming ",
        "Topics": "Python and basic data structures review\nHeaps, hashes, trees\nDivide and conquer algorithms\nGreedy Algorithms\nGraph algorithms\nString algorithms\nDynamic programming",
        "Reading List": "Core Reading List\n\nMiller, B. Ranum, D. (2013). Problem Solving with Algorithms and Data Structures using Python. Franklin Beedle Publishers. Chapters 6-9 (180pp)\nGoodrich, M. (2013). Data Structures & Algorithms in Python. Chapters 8-15 (418pp)\n\nSupplementary Reading List\n\nSkiena, S. (2011). The Algorithm Design Manual. Springer; 2nd edition\nSkiena, S. (2020) Analysis of Algorithms,  videos and Lecture Notes  \nRoughgarden, T. (2017). Algorithms Illuminated Series. Soundlikeyourself Publishing\nRoughgarden, T. (2017). Algorithms 1 (YouTube)\nLeetcode. Practice Problems \n\nhttps://shlegeris.com/2016/11/13/ds.html\n\nhttps://gist.github.com/hellerbarde/2843375\n\nhttps://accidentallyquadratic.tumblr.com/",
        "Prerequisites (Woolf)": "Data Structures & Algorithms 1",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSA",
        "Course Number (Woolf)": 3,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 305,
        "Prerequisites (FL)": [
            "recxvybmEs3olxX2k",
            "rec4pyqtZavqiTZCA"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSA003",
        "Course Code (FL)": "CS305",
        "prereqs": "Discrete Math, Data Structures and Algorithms"
    },
    {
        "Name": "Programming 2",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Required": true,
        "Description": "This course expands on Programming I, and deepens students' knowledge of Python with a focus on data access and management.\n\nPreviously introduced programming topics including data types, operators, variables, and control flow are reinforced, this time in the context of retrieving and manipulating data. Students learn to use Regular Expressions, a powerful tool for finding and extracting data from text. They are introduced to modern web protocols, and learn how to retrieve data from web services using Python and JSON. Students learn to use Python's modules and Object Oriented programming features to organize programs. Students also learn the basics of modeling data and relationships in databases, how to write queries in SQL, and to interact with relational databases from Python.\n\nStudents work on small projects throughout the course. The final project challenges students to retrieve and visualize original data in Python.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 2,
        "Contact Hours (W)": 40,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 50,
        "Quarter (sample)": 2,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nMidterm Project: 25%\nFinal Project: 25%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\nUse regular expressions to extract data from strings and other data types\nAccess and parse structured data in XML format\nRetrieve data from websites using Python and JSON\nExplain structure of database and relationships between multiple tables in a database\nPerform basic CRUD (create, read, update, delete) operations on a database using Python and SQL\nProcess data from an external source, and create data visualizations",
        "Topics": "Regular Expressions\nNetwork Programming\nUsing Web Services\nObject Oriented Programing\nDatabases\nData Visualization",
        "Reading List": "Core Reading List\n\nSeverance, D. C. R. (2016). Python for Everybody: Exploring Data in Python 3. Chapters 12-17 (90 pages)\n\nSupplementary Reading List\n\nDowney, A (2015). Think Python, How to Think Like a Computer Scientist. Green Tea Press (209 pp.)\nSweigart, A (2019), Automate the Boring Stuff with Python, 2nd e. No Starch Press. Ch 7-12  (138 pp.)\n\nhttps://dcic-world.org/2022-01-25/index.html \nhttps://htdp.org/2022-2-9/Book/index.html ",
        "Prerequisites (Woolf)": "CSF002: Programming 1",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 3,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 201,
        "Prerequisites (FL)": [
            "recw6hNqPOoNL1X96"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF003",
        "Course Code (FL)": "CS201",
        "prereqs": "Programming 1"
    },
    {
        "Name": "Capstone Project",
        "ECTS Credits": 15,
        "Kind": "Practical",
        "Required": true,
        "Description": "The Capstone course enables students to demonstrate their proficiency in the technical and human skills that they have acquired throughout their undergraduate studies. The Capstone requires students to conceptualise, plan, and implement a software project to completion, and evaluate their project’s processes and outcomes.\n\nThe Capstone builds on the initial project scoping work that was carried out in Capstone Research Methods, which culminated in students submitting a literature review and project proposal, and gaining formal approval for their Capstone Project Proposal.\n\nIn this course, students will implement their proposed project with the support of a supervisor. Students with a common supervisor will be put into capstone advisory peer groups, and will be required to meet with their group and supervisor regularly to update each other on their capstone progress and to provide feedback. Students will also have regular 1:1 meetings with their capstone supervisor to provide additional support and guidance throughout the term.\n\nUpon completion of their Capstone projects, all students will be required to participate in a Capstone symposium at the end of the term, where they will present their projects to internal and external stakeholders.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 8,
        "Quarter (Woolf plan)": 11,
        "Contact Hours (W)": 125,
        "Self-Study Hours (W)": 125,
        "Assessment Hours (W)": 125,
        "Quarter (sample)": 12,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Interim Capstone progress report - 20%\nFinal Capstone report - 60%\nFinal Capstone presentation - 20%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 60 minutes\n\nClass size during synchronous session:  5 - 10\n\nTime spent on prep/homework per week: 20 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDemonstrate the ability to independently plan and carry out a capstone project.\nDemonstrate deep knowledge of theories, techniques, technologies and tools appropriate to the chosen topic area.\nDesign and develop a software product with the aim of addressing the stated aims of their Capstone project.\nDemonstrate written and verbal communication skills through presentation and discussion of the project findings.\nEvaluate the success of their Capstone project work and project process. ",
        "Topics": "Topics will be unique to the individual student Capstone.",
        "Reading List": "Sharp J A, Peter J, and Howard K (2002) The Management of a Student Research Project (3rd Ed), Gower Publishing.\nKumar R (2010) Research Methodology: A Step by Step Guide for Beginners (3rd Ed), Sage Publishing. \nCreswell J W (2002) Research Design: Qualitative, Quantitative and Mixed Method Approaches (4th Ed), Sage Publishing. \nZobel, J (2005) Writing for Computer Science, second edition, Springer.",
        "Prerequisites (Woolf)": "IDS001: Capstone Research Methods",
        "Sample Degree": true,
        "Prefix (Woolf)": "IDS",
        "Course Number (Woolf)": 3,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 450,
        "Prerequisites (FL)": [
            "recKJ3Pi8D3ECAtc4"
        ],
        "Engagement hours (FL)": 80,
        "Prep hours (FL)": 160,
        "Course Code (Woolf)": "IDS003",
        "Course Code (FL)": "CS450",
        "prereqs": "Capstone Research Methods"
    },
    {
        "Name": "Collaborating For Impact",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "Collaborating for Impact aims to support students in developing effective collaboration skills in the pursuit of collective impact and success. Few problems are solved by individuals working alone, therefore the ability to work effectively with others to achieve a common goal is a crucial professional skill.  \n\nThe course will start by focusing on the social awareness and relationship management components of emotional intelligence, which were briefly introduced in the pre-requisite course, Optimizing Your Learning. Students will then be introduced to a variety of collaboration and leadership theories and frameworks, and they will examine theories of team dynamics and dysfunction, and reflect on how these relate to their past experiences of collaboration in academic and personal settings.\n\nThe second part of this course will require students to put their communication and collaboration skills to practice by completing a group project that is designed to test their ability to work effectively as a group and deliver a high quality output under time, resource, and information constraints.",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 2,
        "Quarter (Woolf plan)": 2,
        "Contact Hours (W)": 25,
        "Self-Study Hours (W)": 25,
        "Assessment Hours (W)": 25,
        "Quarter (sample)": 3,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments - 40%\nFinal group project - 40%\nFinal written reflection - 20%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 90 minutes\n\nClass size during synchronous session: 50 students\n\nTime spent on prep/homework per week: 3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nEvaluate and improve their social awareness and relationship management skills.\nApply key leadership and collaboration theories to collaborative work.\nApply the phases of team formation to their collaborative work.\nIdentify and solve for the underlying problems that drive team dysfunction in their collaborative work.",
        "Topics": "Emotional Intelligence\nSocial Awareness\nRelationship Management\nCollaboration and Leadership Theories\nTeam Dynamics\nTeam Dysfunction",
        "Reading List": "Core Reading List\nPiercy, C. (2019). Problem Solving in Teams and Groups. University of Kansas Libraries. \nUniversity of Minnesota Libraries Publishing. (2016). Communication in the Real World: An Introduction to Communication Studies. \nPayne, W. (2020). Human Behavior and the Social Environment II. University of Arkansas. \nBariso, J. (2018). EQ Applied: The Real-World Guide to Emotional Intelligence. Borough Hall.\nPerez, J and Molina, M. (2017). Leadership and Teamwork in Innovation Ecosystems. Key Issues for Management of Innovative Projects. Intech Open.\n\nSupplementary Reading List\nGentry, W. A., Weber, T. J., & Sadri, G. (2007). Empathy in the Workplace: A Tool for Effective Leadership. Society of Industrial Organizational Psychology Conference.\nNahavandi, A. (2015). The art and science of leadership. 7th ed. Harlow: Pearson Education",
        "Prerequisites (Woolf)": "KC001: Optimizing Your Learning",
        "Sample Degree": true,
        "Prefix (Woolf)": "KC",
        "Course Number (Woolf)": 3,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 222,
        "Prerequisites (FL)": [
            "recvt0zj7nfitJIQg"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (Woolf)": "KC003",
        "Course Code (FL)": "HSS222",
        "prereqs": "Communicating for Success - Writing"
    },
    {
        "Name": "Industry Experience 2",
        "ECTS Credits": 12,
        "Kind": "Practical",
        "Required": true,
        "Description": "Industry Experience is a form of experiential learning that enables students to apply their academic knowledge in a professional context. Students work to build software that meets the needs of a professional organization by completing either (1) an approved internship, or (2) a product studio. \n\nDuring the internship, students work on tasks that meet the needs of the organization, guided by an on-site supervisor. Internships must entail significant, substantial computer science. In the studio, external clients (e.g., businesses, non-profits) sponsor a software development project completed by students. A typical end result is a prototype of or a fully functional software system ready for use by the clients. These projects are completed by teams of 4-6 students, who meet with the client weekly to share progress and get feedback. \n\nStudents complete online modules under the supervision of a faculty advisor. Pre-work includes instruction in communication, goal-setting, and professional development. During the industry experience, students submit bi-weekly written reflections on their personal goals, challenges, and, for the studio, team feedback. At the end of the term, students obtain written feedback from their organization supervisor.  They also submit a final report which describes the problem statement, approaches/methods used, deliverables, and skills gained. Industry Experience culminates in a final presentation which is shared as a public blog post.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 8,
        "Quarter (Woolf plan)": 8,
        "Contact Hours (W)": 280,
        "Self-Study Hours (W)": 40,
        "Assessment Hours (W)": 0,
        "Quarter (sample)": 8,
        "Supervised Placement Hours": 280,
        "Mode of Assessment": "Writing (Individual Learning Plan & Bi-weekly reflections): 25%\nSupervisor/Client evaluation: 25%\nFinal Report & Presentation: 50% ",
        "Hours and Format": "Synchronous class sessions per week:  none\n\nClass size during synchronous session:  N/A\n\nTime spent on prep/homework per week: 2 hours\n\nTimetable format for the exam? N/A\n\nAny workplace experience that needs to be accredited? Yes",
        "Learning Outcomes": "By the end of the course, students will:\n\nApply academic knowledge and skills in new professional settings\nDemonstrate the ability to cope effectively with ambiguous and unfamiliar situations\nDevelop interpersonal and professional skills that allow them to successfully transition to work \nReflect on their personal skills, and identify opportunities for further development \nDemonstrate professional and ethical behavior, and ability to maintain accountability for their commitments",
        "Topics": "Communication \nUpward management\nPersonal branding \nProductivity\nWork-Life Balance\nProject management ",
        "Reading List": "Core reading list\nPersonal Brand Workbook (2015). PricewhaterhouseCoopers\nNortheastern University (2020). Job Search Guide\nBolton, G. and Delderfield, R. (2018). Reflective practice: writing and professional development (5th edition). London: SAGE.\nRollag, K. (2015) Succeed in New Situations. Harvard Business Review \n\n\nSupplementary reading list \nYancy, G. B., Clarkson, C. P., Baxa, J. D., & Clarkson, R. N., (2003). Examples of good and bad interpersonal skills at work. Eye on Psi Chi, 7\nRollag, K. (2015) What to Do When You’re New. AMACOM",
        "Prerequisites (Woolf)": "Programming I\nProgramming II\nWeb Foundations\nWeb Application Development\nData Structures & Algorithms I\nTeam Software Project\nCollaborating for Success\nCommunicating for Impact",
        "Sample Degree": true,
        "Prefix (Woolf)": "IDS",
        "Course Number (Woolf)": 4,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 350,
        "Prerequisites (FL)": [
            "recEzBCgoYyNziboh"
        ],
        "Engagement hours (FL)": 80,
        "Prep hours (FL)": 160,
        "Course Code (Woolf)": "IDS004",
        "Course Code (FL)": "CS350",
        "prereqs": "Industry Experience 1"
    },
    {
        "Name": "Engineering For Development",
        "ECTS Credits": 6,
        "Kind": "Practical",
        "Required": true,
        "Description": "Engineering for Development, Challenge Studio 1, and Challenge Studio 2 are a series of 3 courses that help students investigate the role that technology can play in solving some of the world’s most intractable social and economic development challenges. \n\nIn Engineering for Development, students will learn how to analyze the root causes of development challenges so that they are able to build effective technology solutions. The course aims to introduce students to selected global development challenges using the United Nations Sustainable Development Goals (SDGs) as the framework for selecting the areas of focus.\n\nEach term, the course will focus on 1- 2 subject areas (e.g. Quality Education, Affordable and Clean Energy, Climate Action), which will serve as test cases for students to develop the skills required to effectively analyze and understand complex development issues. Students will examine the system level dynamics that are at the root of these challenges, and will also analyze and critique technology related solutions that have been developed to address these challenges.",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 5,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 70,
        "Assessment Hours (W)": 30,
        "Quarter (sample)": 5,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments - 60%\nFinal group project  - 20%\nFinal presentation - 20%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 90 minutes\n\nClass size during synchronous session: 50 students\n\nTime spent on prep/homework per week: 9 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nIdentify and explain contemporary economic development challenges using multidisciplinary perspectives.\nAnalyse the historical, economic, and social context of economic development challenges.\nUse systems thinking to evaluate the root causes and impacts of the contemporary economic development challenges.\nEvaluate the effectiveness of various technology solutions that have been created to tackle development challenges.",
        "Topics": "Historical Context of Sustainable Development\nUN Sustainable Development Goals\nAnalysis of selected development subject area\nCase studies of Engineering for Development\nSystems Thinking\nProblem Solving Frameworks",
        "Reading List": "Core Reading List\nKim, Daniel. (1999). Introduction to Systems Thinking. Pegasus Communications.\nEgelston, AE. (2013). Sustainable Development: A History. Springer.\nZiai, A. (2016) Development Discourse and Global History. Taylor & Francis. https://library.oapen.org/handle/20.500.12657/46915\nGlobal Challenges Foundation (2016): https://api.globalch allenges.org/\nGlobal Oneness Project. https://www.globalonenessproject.org \nUN Sustainable Development Goals. https://sdgs.un.org/goals \nSDG Tracker <https://sdg-tracker.org/>\nSocial Problems: Continuity and Change. Saylor Foundation.. https://saylordotorg.github.io/text_social-problems-continuity-and-change/ \n\nSupplementary Reading List\nBanerjee, A. and Duflo, E. (2011). Poor Economics: A Radical Rethinking of the Way to Fight Global Poverty. Public Affairs.",
        "Sample Degree": true,
        "Prefix (Woolf)": "KC",
        "Course Number (Woolf)": 4,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 223,
        "Prerequisites (FL)": [
            "recvt0zj7nfitJIQg"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "KC004",
        "Course Code (FL)": "HSS223",
        "prereqs": "Communicating for Success - Writing"
    },
    {
        "Name": "Mathematical Thinking",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "Description": "This course helps students develop the ability to think logically and mathematically, with an emphasis on logical reasoning, and communicating mathematical arguments. The course begins with a brief review of number systems and their relevance to digital computers. Students review the algebraic operations necessary to perform programming functions. In the unit on logic and proofs, students learn to identify, evaluate, and make convincing mathematical arguments. They are introduced to formal logic and methods for determining the validity of an argument. Students learn to decompose problems using recursion and induction and explore how these methods are used in real-world computational problems. The final unit is an introduction to counting and probability. Topics covered include principles of counting, permutations, combinations, random variables, and probability theory. ",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 1,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 40,
        "Quarter (sample)": 1,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nClass participation: 20%\nFinal Project: 30%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\nEvaluate arguments, and identify the premises and conclusion of a mathematical argument \nCreate diagrams to graphically depict the structure of an argument \nDecompose a given problem into smaller problems using recursion and induction\nApply probability rules to determine the likelihood of an event",
        "Topics": "Number systems\nMaking convincing arguments \nRecursion and induction\nLogic\nCombinatorics\nProbability",
        "Reading List": "Core Reading List\n\nDeLancey, C. (2017). A Concise Introduction to Logic. Open SUNY Textbooks\nCleave, M. (2016). Introduction to Logic and Critical Thinking\n\nSupplementary Reading List\n\nDevlin, K. (2012) Introduction to Mathematical Thinking. \n\nhttps://slim.computer/visual-proofs/proof/",
        "Prerequisites (Woolf)": "Secondary School Algebra\nPre-Calculus",
        "Sample Degree": true,
        "Math": true,
        "Format": "Synchronous class sessions: 1 (90-min) sessions per week\nPreparation and homework: 8 hours per week",
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 4,
        "Prefix (FL)": "MNS",
        "Course Number (FL)": 120,
        "Reference Classes": "https://terrytao.wordpress.com/2022/01/27/masterclass-on-mathematical-thinking/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF004",
        "Course Code (FL)": "MNS120"
    },
    {
        "Name": "Introduction to Data Science",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Required": true,
        "Description": "Data science is applicable to a myriad of professions, and analyzing large amounts of data is a common application of computer science. This course empowers students to analyze data, and produce data-driven insights. It covers all areas needed to solve problems involving data, including preparation (collection and integration), presentation (information visualization), analysis (machine learning), and products (applications).\n\nThis course is a hybrid of a computing course focused on Python programming and algorithms, and a statistics course focusing on estimation and inference. Data analysis requires acquiring and cleaning data from various sources including the web, APIs, and databases. Students learn techniques for summarizing and exploring data with spreadsheets, SQL, R, and Python. They also learn to create data visualizations, and practice communication and storytelling with data. Finally, students are introduced to machine learning techniques of prediction and classification, which will prepare them for advanced study of data science.\n\nThroughout the course, students will work with real datasets and attempt to answer questions relevant to their lives and interests. They will also probe the ethical questions surrounding privacy, data sharing, and algorithmic decision making. The course culminates in a project where students build and share a data application to answer a real-world question.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 6,
        "Contact Hours (W)": 45,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 45,
        "Quarter (sample)": 5,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nClass participation: 20%\nFinal Project: 30%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nEvaluate the quality, usefulness, and limitations of a dataset\nConduct statistical analysis of data, and draw meaningful and scientific inferences from data\nApply data to make informed predictions about possible outcomes\nManage, summarize, and visualize data using Python\nApply machine learning methods and assess the quality of predictions",
        "Topics": "Data collection and management\nSummarizing and visualizing data \nEstimation\nPrediction \nClassification",
        "Reading List": "Core Reading List\n\nAdhikari, A., DeNero J. (2020) Computational and Inferential Thinking: The Foundations of Data Science\nAggarwal R., Ranganathan P., (2017). Common pitfalls in statistical analysis. NCBI\nLuciano, F., Mariarosaria T., (2016). What is data ethics?. Royal Society Publishing\n\nSupplementary Reading List\n\nHamel G. (2020). Python for Data Analysis Playlist\nPandas Cheat Sheet. Datacamp.com",
        "Prerequisites (Woolf)": "Programming 2\nMathematical Thinking",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSA",
        "Course Number (Woolf)": 4,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 230,
        "Prerequisites (FL)": [
            "recw6hNqPOoNL1X96",
            "recTdEVmuSK0hIl5K"
        ],
        "Reference Classes": "http://data8.org/\nhttps://cds.nyu.edu/wp-content/uploads/2019/06/DS4E-Syllabus-Spring2019.pdf",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSA004",
        "Course Code (FL)": "CS230",
        "prereqs": "Programming 1, Mathematical Thinking"
    },
    {
        "Name": "Machine Learning",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "This course aims to teach students the theoretical and practical methods for solving problems using machine learning. Machine learning is one of the fastest-growing areas of computer science. It’s applications are reshaping society, from consumer products (e.g., voice assistants and recommendations) to life-sciences (e.g., personalized medicine and tumor detection). This course will build on the Data Science introductory course, and help students understand how, why and when machine learning methods work. \n\nStudents will be introduced to major paradigms in machine learning, and gain working knowledge of supervised and unsupervised learning techniques. Students will learn to solve common problems such as regression, classification, clustering, matrix completion and pattern recognition. They will learn how to train and optimize neural networks.  They will explore modern software libraries that enable programmers to develop machine learning systems. Students will use these libraries along with publicly available data sets to build models, then learn how to evaluate and verify the results. Throughout the course, as they apply technical methods, students will also examine the societal context of machine learning and considerations of transparency, bias and privacy.  \n\nCourse assignments will consist of short programming exercises and peer discussions of ethical considerations. The course culminates in a final group project and accompanying paper that allows students to apply concepts to a problem of personal interest.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 9,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 70,
        "Assessment Hours (W)": 50,
        "Quarter (sample)": 10,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 60%\nClass participation: 10%\nFinal project: 30%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nExplain the different paradigms for learning (supervised, unsupervised, etc.) and their practical implications\nAnalyze a given ML technique for solving a problem against technical and ethical dimensions\nImplement machine learning methods (e.g., data preprocessing, learning, model design) in a single functional system\nDesign and implement experiments to compare different learning techniques on real-world problems",
        "Topics": "Supervised and unsupervised learning\nLinear classifiers\nFeature representation\nRegression\nNeural networks",
        "Reading List": "Core Reading List\n\nLeslie K, Tomás L, Isaac C, and Duane B. (2019). 6.036 Introduction to Machine Learning. Fall 2020. Massachusetts Institute of Technology: MIT OpenCourseWare\nHarrington P. (2012). Machine Learning in Action. Manning\n\nSupplementary Reading List\n\nDaume, H. (2017). A Course in Machine Learning\nNorvig P., Russell S. (2020). Artificial Intelligence: A Modern Approach. Pearson, 4th e. (Chapters 19-22)\n- https://jvns.ca/blog/2014/11/16/fun-with-machine-learning-making-sure-your-model-actually-works/ ",
        "Prerequisites (Woolf)": "Programming 2\nDiscrete Mathematics\nData Structures & Algorithms 2\nData Science",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (Woolf)": "CSE",
        "Course Number (Woolf)": 4,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 331,
        "Prerequisites (FL)": [
            "rec2xIW81L5hKLAmJ",
            "recsLQY3CYADmOtex",
            "recR5xHcJLoHsVrjX"
        ],
        "Reference Classes": "https://www.coursera.org/learn/machine-learning",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSE004",
        "Course Code (FL)": "CS331",
        "prereqs": "Introduction to Data Science, Programming 2, Probability and Statistics"
    },
    {
        "Name": "Challenge Studio 1",
        "ECTS Credits": 6,
        "Kind": "Practical",
        "Required": true,
        "Description": "In Challenge Studio 1, students will work in groups to design, develop, and test a solution to a development challenge of their choice. The focus of this course is to provide students with the tools and skills to create meaningful technology solutions (e.g. services, products) to a sustainable development problem. The course will utilize virtual studio time, where groups work together on the key incremental tasks that are required to allow them to successfully create their final project output. Studio time will be supported by lectures, seminars, and learning resources on useful skills such as human-centred design, end-user identification, requirements gathering, value creation, impact measurement, and creative thinking and innovation. At the end of Challenge Studio 1, students will submit a Minimum Viable Product (MVP) that is ready to go to market as their final project deliverable. ",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 6,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 20,
        "Assessment Hours (W)": 100,
        "Quarter (sample)": 6,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments - 60%\nFinal presentation - 20%\nFinal written report -  20%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 90 minutes\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week: 10 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDevelop a detailed project plan and employ progress tracking methods using appropriate metrics and tools.\nConduct user research on the problem and opportunity space of a chosen development challenge.\nCollect quantitative and qualitative data about a group of customers and use it to define product value proposition and roadmap.\nSelect and apply product design frameworks relevant to particular situations.\nDevelop a product or service to solve a well-defined user problem and define success metrics.\nIdeate and prototype solutions to an identified problem.",
        "Topics": "Human Centered Design\nEnd User Identification\nProduct Specifications\nRequirements Gathering\nValue Creation\nImpact Measurement\nCreative Thinking and Innovation",
        "Reading List": "Core Reading List\nIDEO.org (2015). The Field Guide to Human Centered Design. \nBrown, T. (2009). Change by Design: How Design Thinking Creates New Alternatives for Business and Society, Harper Collins Inc.\nLarson, A. (2011). Sustainability, Innovation, and Entrepreneurship. Saylor Foundation.\nSwanson, L. (2017). Entrepreneurship and Innovation Toolkit. University of Saskatchewan.\nNorman, D. (2013). The Design of Everyday Things. Basic Books\n\nSupplementary Reading List\nUlrich, Karl, and Steven Eppinger. Product Design and Development. 3rd ed. New York, NY: McGraw-Hill, 2003. ISBN: 9780072471465.\nHawryszkiewycz, Igor (2013). Design Thinking for Business: a Handbook for Design Thinking in Wicked Systems. BookBaby.\nHokanson, B. (2017). Developing Creative Thinking Skills: An Introduction for Learners. 1st ed. Routledge.\nStickdorn, Marc, and Schneider, Jakob (2010).This Is Service Design Thinking: Basics, Tools, Cases. BIS Publishers.\n",
        "Prerequisites (Woolf)": "Engineering for Development\nProduct Management and Design",
        "Sample Degree": true,
        "Prefix (Woolf)": "KC",
        "Course Number (Woolf)": 5,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 321,
        "Prerequisites (FL)": [
            "recJmlWbceyIDDFTw"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "KC005",
        "Course Code (FL)": "HSS321",
        "prereqs": "Engineering For Development"
    },
    {
        "Name": "Artificial Intelligence",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "Artificial Intelligence (AI) aims to teach students the techniques for building computer systems that exhibit intelligent behavior. AI is one of the most consequential applications of computer science, and is helping to solve complex real-world problems, from self-driving cars to facial recognition. This course will teach students the theory and techniques of AI, so that they understand how AI methods work under a variety of conditions. \n\nThe course begins with an exploration of the historical development of AI, and helps students understand the key problems that are studied and the key ideas that have emerged from research. Then, students learn a set of methods that cover: problem solving, search algorithms, knowledge representation and reasoning, natural language understanding, and computer vision. Throughout the course, as they apply technical methods, students will also examine pressing ethical concerns that are resulting from AI, including privacy and surveillance, transparency, bias, and more.\n\nCourse assignments will consist of short programming exercises and discussion-oriented readings. The course culminates in a final group project and accompanying paper that allows students to apply concepts to a problem of personal interest.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 10,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 70,
        "Assessment Hours (W)": 50,
        "Quarter (sample)": 11,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly Assignments: 60%\nClass participation: 10%\nFinal project: 30%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDemonstrate understanding of the foundation and history of AI \nExplain basic knowledge representation, problem solving, inference, and learning methods of AI \nDevelop intelligent systems to solve real-world problems by selecting and applying appropriate algorithms \nExplain the capabilities and limitations of various AI algorithms and techniques\nParticipate meaningfully in discussions of AI, including its current scope and limitations, and societal implications",
        "Topics": "Intelligent Agents\nSearch strategies\nGame Playing\nKnowledge and Reasoning \nNatural Language Processing \nComputer Vision\nEthics and safety",
        "Reading List": "Core Reading List\n\nNorvig P., Russell S. (2020). Artificial Intelligence: A Modern Approach. Pearson, 4th e. (Chapters 1-12, 23, 24, 25,27)\n\nSupplementary Reading List\n\nZhang A, Lipton Zn, Li M, Smola A. (2021) Dive into Deep Learning",
        "Prerequisites (Woolf)": "Programming 2\nDiscrete Mathematics\nData Structures & Algorithms 2\nData Science",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (Woolf)": "CSE",
        "Course Number (Woolf)": 5,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 332,
        "Prerequisites (FL)": [
            "rec2xIW81L5hKLAmJ",
            "recsLQY3CYADmOtex",
            "recR5xHcJLoHsVrjX",
            "recxvybmEs3olxX2k"
        ],
        "Reference Classes": "http://ai.berkeley.edu/home.html\nhttps://cs.lmu.edu/~ray/classes/ai/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSE005",
        "Course Code (FL)": "CS332",
        "prereqs": "Introduction to Data Science, Programming 2, Probability and Statistics, Discrete Math"
    },
    {
        "Name": "Network and Computer Security",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "Description": "Network and Computer Security teaches students the principles and practices of security for software, systems, and networks. It aims to make students critical examiners and designers of secure systems. Students will learn the mathematical and theoretical underpinning of security systems, as well as practical skills to help them build, use, and manage secure systems.\n\nThe first part of the course is focused on applied cryptography. Students learn general cryptographic protocols and investigate real-world algorithms. The second part of the course covers software and system security, including access controls, trends in malicious code, and how to detect system vulnerabilities. There is a special focus on web security, and modern practices for building secure web architectures. The final section of the course focuses on network security and covers concepts of networking, threats, and intrusion protection. \n\nCourse projects will require students to think both as an attacker and as a defender, and write programs that examine security design. Students will also examine recent security and privacy breaches. Working in pairs, they’ll conduct an in-depth investigation, and give a presentation to help classmates understand its technical underpinnings and social implications.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 7,
        "Contact Hours (W)": 45,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 45,
        "Quarter (sample)": 6,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Projects: 70%\nClass participation: 10%\nPresentation: 20%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\n- Understand a variety of cryptographic algorithms and protocols underlying network security applications.\n- Explain security principles, and articulate advantages and limitations of various security techniques\n- Analyze and evaluate computer systems for their security, and articulate the risks faced by a system\n- Design countermeasures to protect against common security vulnerabilities in software\n- Design, implement, and use security techniques to solve problems",
        "Topics": "Cryptography\nSoftware and system security\nWeb security \nNetwork Security",
        "Reading List": "Core Reading List\n\nDu, W.  (2019) Computer & Internet Security: A Hands-on \nApproach. \nStallings, W. Brown, L. (2015). Computer Security: Principles and Practice, 3rd Edition\n\nSupplementary Reading List\n\nGoodrich, M. (2010). Introduction to Computer Security. Pearson\nhttps://seedsecuritylabs.org/emulator/\n",
        "Prerequisites (Woolf)": "Programming 2\nWeb Application Development\nComputer Systems\nDiscrete math",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSA",
        "Course Number (Woolf)": 5,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 303,
        "Prerequisites (FL)": [
            "recsLQY3CYADmOtex",
            "rec0L0YKqCw2MXwGJ",
            "recxvybmEs3olxX2k"
        ],
        "Reference Classes": "https://cs.lmu.edu/~ray/classes/it/\nhttps://cs.lmu.edu/~ray/classes/ssd/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSA005",
        "Course Code (FL)": "CS303",
        "prereqs": "Programming 2, Web Application Development, Discrete Math"
    },
    {
        "Name": "Web Application Development",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Required": true,
        "Description": "This course builds on Web Foundations, and provides a comprehensive introduction to client and server-side development for the web. \n\nIn this project-based course, students will work independently to build a web application, and progressively apply new knowledge to their application. Students deepen their knowledge of HTML and learn advanced CSS, including how to use CSS variables and modern frameworks for motion and interaction. They learn about accessible web design, and how to create websites and apps that work well on mobile devices, and that support use of assistive technologies like screen readers.\n\nStudents will build the front-end of a web application using HTML, CSS and JavaScript then write a supporting back-end using either a JavaScript or Python framework. In doing so, they will demonstrate knowledge of the request-response structure, database management, and JSON-based APIs. Students will also apply technical communication skills by writing technical specs, drafting architecture diagrams, and documenting APIs. ",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 2,
        "Contact Hours (W)": 40,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 50,
        "Quarter (sample)": 2,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nMidterm Project: 25%\nFinal Project: 25%",
        "Hours and Format": "Synchronous class sessions per week: 1 (90-min) per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week: 6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to: \nUse HTML, CSS, and JavaScript to build interactive websites\nDescribe and implement common web accessibility practices \nDesign and implement mobile-first principles to build responsive websites\nUse a modern backend framework to build database-driven websites\nDevelop and deploy a web application",
        "Topics": "Request-response cycle\nServer-side templating \nAPIs\nResponsive web design\nAdvanced CSS (motion, interaction)\nAccessibility\nPython Web frameworks (Flask, Django)",
        "Reading List": "Core\nMendez, M (2014). The Missing Link: An Introduction to Web Development and Programming. Open SUNY Textbooks. (274 pp)\nHaverbeke, M. (2018) Eloquent JavaScript. No Starch Press\nThe Chang School (2019), Web Accessibility for Developers\n\nSupplemental\nMozilla (2020), Learn Web Development\nMozilla Developer Network. Web Reference\nSeverance, Charles Django for Everyone\nECMAScript(2016). Official JavaScript standard",
        "Prerequisites (Woolf)": "CSF001: Web Foundations\nCSF002: Programming 1",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 5,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 202,
        "Prerequisites (FL)": [
            "recHQNdqyqQKnwMHf",
            "recw6hNqPOoNL1X96"
        ],
        "Reference Classes": "https://web.stanford.edu/class/cs142/index.html\nhttps://web.stanford.edu/class/archive/cs/cs193x/cs193x.1176/lectures/\n",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF005",
        "Course Code (FL)": "CS202",
        "prereqs": "Web Foundations, Programming 1"
    },
    {
        "Name": "Challenge Studio 2",
        "ECTS Credits": 6,
        "Kind": "Practical",
        "Required": true,
        "Description": "Challenge Studio 2 supports students in creating a sustainable business model for the MVP that they developed in Challenge Studio 1. This course is focused on putting the MVPs in the hands of real users, getting their feedback, and iterating and refining the product or service, while also developing a viable business model. The course will utilize virtual studio time, where groups are able to work collaboratively on their MVPs, with the support of additional lectures, seminars, and learning resources on important topics such as product launch planning, user evaluation tools and frameworks, business canvas development, funding models, financial modelling and strategy, and pitching. The course will culminate in a pitch showcase, where students are required to present their work to relevant stakeholders (e.g. industry leaders).",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 7,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 20,
        "Assessment Hours (W)": 100,
        "Quarter (sample)": 9,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments - 60%\nFinal Pitch  - 20%\nBusiness Plan - 20%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 90 minutes\n\nClass size during synchronous session: 50 students\n\nTime spent on prep/homework per week: 10 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nCreate and implement channels for receiving real-world feedback.\nCreate a business plan and implementation strategy.\nCreate and deliver a strategic product pitch to relevant stakeholders.\nDesign and critically analyse business evaluation tools.\nDevelop a detailed project plan and employ effective progress tracking methods using appropriate metrics and tools.\nEvaluate and improve upon an existing solution to make it more effective.",
        "Topics": "Product Launch Planning\nElements of a Business Plan \nImplementation Strategies\nEvaluation Tools and Frameworks (User interviews, Success Metrics, survey data)\nFinancial Strategies (Revenue Streams, Cost Drivers)\nTypes of Investment and Funding \nPitching",
        "Reading List": "Core Reading List\nIDEO.org (2015). The Field Guide to Human Centered Design. \nBrown, T. (2009). Change by Design: How Design Thinking Creates New Alternatives for Business and Society, Harper Collins Inc.\nEdwards, J. et al (2014). Mastering Strategic Management. BCcampus. \nSwanson, L. (2017). Business Plan Development Guide. University of Saskatchewan. \nSwanson, L. (2017). Entrepreneurship and Innovation Toolkit. University of Saskatchewan. \n\nSupplementary Reading List\nBornstein, D. and Davis, S. (2010). “Social Entrepreneurship: What Everyone Needs to Know” Oxford University Press.\nBrocchini, M. (2015) Product-Market Fit Analysis. Bootstrap Marketing.\nBull, M. and Ridley-Duff, R. (2019). Understanding Social Enterprise: Theory and Practice. 3rd ed. SAGE Publications.\nOlsen, D. (2015) The Lean Product Playbook: How to innovate with Minimum Viable Products and Rapid Customer Feedback. John Wiley & Sons Inc.\nYunus, Muhammad. (2011). “Building Social Business: The New Kind of Capitalism that Serves Humanity's Most Pressing Needs” Public Affairs.\n",
        "Prerequisites (Woolf)": "KC004: Challenge Studio 1",
        "Sample Degree": true,
        "Prefix (Woolf)": "KC",
        "Course Number (Woolf)": 6,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 322,
        "Prerequisites (FL)": [
            "recFRIeQbAffFXJFI"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "KC006",
        "Course Code (FL)": "HSS322",
        "prereqs": "Challenge Studio 1"
    },
    {
        "Name": "Human Computer Interaction",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Description": "This course introduces students to the principles of human-computer interaction (HCI). Students explore how humans process information (perception, memory, attention) in the context of designing and evaluating interfaces. This course complements programming coursework by helping students understand how to design more usable systems. \n\nThe course builds on previous knowledge of design thinking, and expects students to apply the design thinking methodology as a starting point. The first part of the course focuses on designing for multiple platforms. Students create designs that solve a problem on multiple devices (e.g., web, mobile, wearables) and learn how to create a coherent design system as users move between devices. The second part of the course delves into design beyond visual user interfaces, and teaches students how to design for emerging technologies, for example, sensors, controls and ubiquitous computing. Throughout the course, students learn and apply a variety of evaluation methodologies used to measure the usability of design. \n\nThis is a project based course and, in each part, students will work in a team to design, prototype and test a solution to a problem. Students will present their designs in class sessions, and practice giving and receiving meaningful critiques.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 9,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 50,
        "Assessment Hours (W)": 70,
        "Quarter (sample)": 7,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 20%\nClass participation: 20%\nTeam projects: 60%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nApply core principles and models of user-centered design to critique interaction design \nDesign and implement coherent user interfaces across multiple devices and platforms",
        "Topics": "Design methods\nEvaluation Methods\nCognition and decision-making\nCross platform UX ",
        "Reading List": "Core Reading List\n\nLee, J. (2017). Designing for People: An Introduction to Human Factors Engineering. CreateSpace Independent Publishing Platform , 3rd e\nPreece J, Sharp H, Rogers Y (2015). Interaction Design: Beyond Human-Computer Interaction, Wiley, 4th e\n\nSupplementary Reading List\n\nNorman, D. (2013). The Design of Everyday Things. Basic Books\nFollet, J. (2014). Designing for Emerging Technologies: UX for Genomics, Robotics, and the Internet of Things. O’Reilly Media\nhttps://en.wikibooks.org/wiki/Models_and_Theories_in_Human-Computer_Interaction ",
        "Prerequisites (Woolf)": "Programming 2\nProduct Management and Design",
        "Elective": true,
        "Sample Degree": true,
        "Prefix (Woolf)": "CSE",
        "Course Number (Woolf)": 6,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 301,
        "Prerequisites (FL)": [
            "recT4J6ZyOMBe3kyY"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSE006",
        "Course Code (FL)": "CS301",
        "prereqs": "Product Management and Design"
    },
    {
        "Name": "Data Structures and Algorithms",
        "ECTS Credits": 6,
        "Kind": "Theory",
        "Required": true,
        "Description": "This course teaches the fundamentals of data structures and introduces students to the implementation and analysis of algorithms, a critical and highly valued skill for professionals.  \n\nStudents start by examining the basic linear data structures: linked lists, arrays, stacks, and queues. They learn how to build these structures from scratch, represent algorithms using pseudocode, and translate these into running programs. They apply these algorithms to real-life applications to understand how to make complexity and performance tradeoffs. Students will also learn how to develop algorithms for sorting and searching, use iteration and recursion for repetition, and make tradeoffs between the approaches. They will learn to estimate the efficiency of algorithms, and practice writing and refining algorithms in Python.  \n\nThis course emphasizes big-picture understanding and practical problem-solving in preparation for technical interviews and professional practice. Throughout the course, students will solve common practice problems, and participate in mock interview sessions. As part of their formative assessments, they will also deepen their understanding of these topics and practice technical communication by writing technical blog posts.",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 3,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 60,
        "Assessment Hours (W)": 40,
        "Quarter (sample)": 2,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 50%\nClass participation: 25% \nFinal Project: 25%",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) session per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No\n",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nDescribe the implementation and performance of fundamental data structures\nDescribe underlying data structures upon which more complex structures are built \nDesign and analyze recursive algorithms \nImplement several searching and sorting algorithms including insertion-sort, merge-sort and heap-sort\nSolve common algorithmic technical interview problems",
        "Topics": "Analyzing algorithms (Big-O, runtimes)\nRecursion\nLinked Lists\nArrays\nStacks\nQueues\nSort and search",
        "Reading List": "Core Reading List\n\nMiller, B. Ranum, D. (2013). Problem Solving with Algorithms and Data Structures using Python. Franklin Beedle Publishers. Chapters 1-5 (183pp)\nGoodrich, M. (2013). Data Structures & Algorithms in Python. Chapters 1 - 7 (294 pp)\n\nSupplementary Reading List\n\nSkiena, S. (2011). The Algorithm Design Manual. Springer; 2nd edition \nLeetcode. Practice Problems ",
        "Prerequisites (Woolf)": "Mathematical Thinking\nProgramming 1\nProgramming 2",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 6,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 205,
        "Prerequisites (FL)": [
            "recw6hNqPOoNL1X96",
            "recTdEVmuSK0hIl5K"
        ],
        "Reference Classes": "https://cs.lmu.edu/~ray/classes/dsa/",
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF006",
        "Course Code (FL)": "CS205",
        "prereqs": "Programming 1, Mathematical Thinking"
    },
    {
        "Name": "Designing Your Future",
        "ECTS Credits": 3,
        "Kind": "Skills",
        "Required": true,
        "Description": "Designing Your Future is inspired by the Stanford University course Designing Your Life. In this course, final year students will use design thinking to reflect on their undergraduate studies, and to plan and prepare for their transition into full-time employment\n\nThe course begins by exploring some of the self-awareness topics (e.g. identity, self-image, mental models, and motivation) that were introduced during the Optimizing Your Learning course. Students will revisit artefacts that they created during that course, and reflect on their personal and technical growth over the course of the degree program. This will allow them to craft a compelling personal and professional narrative so that they can position themselves effectively in the job market. Students will also learn how to use a design thinking approach to explore options for their careers after graduation.\n\nIn the second half of the course, students will develop practical skills to support their transition into full-time employment. They will learn critical skills like networking, professionalism, virtual collaboration, etc. that will support them in their integration into the workplace, while also developing some practical life skills, such as financial planning and emotional wellbeing.",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 2,
        "Quarter (Woolf plan)": 10,
        "Contact Hours (W)": 25,
        "Self-Study Hours (W)": 30,
        "Assessment Hours (W)": 20,
        "Quarter (sample)": 10,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments - 60%\nPost-graduation plan - 20%\nFinal presentation - 20%",
        "Hours and Format": "Synchronous class sessions per week: 1 session per week = 90 minutes\n\nClass size during synchronous session: 50 students\n\nTime spent on prep/homework per week: 3 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to:\n\nAnalyze their personal interests, strengths, and competencies to create short and long term professional goals.\nUtilize design thinking to create an aspirational image of their life and career.\nCraft a compelling academic, professional, and personal narrative that can be well positioned in the job marketplace.\nCreate a preliminary post-graduation plan.\nDevelop professionalism skills that are applicable in both a co-located and virtual work context.\nApply financial and emotional wellbeing tools to support their holistic wellness.",
        "Topics": "Design Thinking\nSelf-Awareness and Motivation\nCareer Planning\nNetworking\nProfessionalism and Virtual Work\nFinancial Planning\nEmotional Wellbeing",
        "Reading List": "Burnett, W. & Evans, D. J. (2015). Designing Your Life: How to Build a Well-Lived, Joyful Life. New York: Alfred A. Knopf. \nBridges, W. (2019). Transitions: Making Sense of Life’s Changes.  Da Capo Lifelong Books.\nGardner, H. (2008). What is good work? The Tanner Lectures on Human Values. The University of Utah. http://tannerlectures.utah.edu/_documents/a-to-z/g/Gardner_08.pdf \nBrooks, D. (2007, October 9). The Odyssey Years. The New York Times. http://www.nytimes.com/2007/10/09/opinion/09brooks.html ",
        "Sample Degree": true,
        "Prefix (Woolf)": "KC",
        "Course Number (Woolf)": 7,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 225,
        "Prerequisites (FL)": [
            "recvt0zj7nfitJIQg"
        ],
        "Engagement hours (FL)": 20,
        "Prep hours (FL)": 40,
        "Course Code (Woolf)": "KC007",
        "Course Code (FL)": "HSS225",
        "prereqs": "Communicating for Success - Writing"
    },
    {
        "Name": "Product Management and Design",
        "ECTS Credits": 6,
        "Kind": "Technical",
        "Required": true,
        "Description": "This course teaches students to build products users want and love. It gives students a foundation in the tools and practices of modern product management and interaction design.  Students will work in pairs to apply product development skills to real user challenges. \n\nThe course begins with a focus on user research. Students learn and apply the design thinking framework to product development. They learn to define user needs through user interviews and market analysis. They learn to translate user needs into product specifications, and define metrics to test product success. They learn to create and test design prototypes (wireframes, user journeys). The second part of the course focuses on UX/UI design. Students learn key concepts in UI/UX design including information hierarchy, and typography and color. Students will create high-fidelity UI mockups using industry-standard tools. They’ll then conduct usability tests to gauge the effectiveness of their designs. \n\nAs students work in pairs, they will practice the complementary and collaborative roles of PMs and UX designers in early product development. They’ll also practice giving design critiques to other teams, and responding to feedback on their designs. By the end of the courses, each pair will have a user-tested, refined, and development-ready design for a web or mobile application.  ",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 3,
        "Contact Hours (W)": 40,
        "Self-Study Hours (W)": 80,
        "Assessment Hours (W)": 30,
        "Quarter (sample)": 3,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Class participation (25%) \nWeekly assignments (50%) \nFinal project and presentation (25%) ",
        "Hours and Format": "Synchronous class sessions per week:  1 (90-min) per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to: \n\nApply at least one product ideation framework (e.g., design thinking) to identify product opportunities  \nConduct qualitative concept tests, and make product decisions based on user feedback\nCreate basic wireframes to describe a user journey\nWrite product requirements documentation that describe the purpose, features, and metrics of success for a software product \nDsiegn high-fidelity mockups for an application, and build interactive UI prototypes using industry-standard tools \nAnalyze and assess a design, and give actionable feedback for improvement ",
        "Topics": "Design thinking\nWireframing and user journey\nProduct requirements\nAgile methodology\nUX/UI design",
        "Reading List": "Core Reading List\n\nNorman, D. (2013). The Design of Everyday Things. Basic Books\nIDEO.org (2015). The Field Guide to Human Centered Design. \n\nSupplementary reading list\n\nGarrett, J J. (2010). The Elements of User Experience: User-centered Design for the web. New riders \nKrug, S. (2005). Don’t Make Me Think: A Common Sense Approach to Web Usability. \nKnapp, J. (2016) Sprint: How to Solve Big Problems and Test New Ideas in Just Five Days. Simon & Schuster\n- https://practicaltypography.com/",
        "Prerequisites (Woolf)": "KC002 Communicating for Success\nKC003 Collaborating for Impact\nTeam Software project (co-requisite)",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 7,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 104,
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF007",
        "Course Code (FL)": "CS104"
    },
    {
        "Name": "Team Software Project",
        "ECTS Credits": 6,
        "Kind": "Practical",
        "Required": true,
        "Description": "In this course, students practice the skills necessary to work effectively on a professional software product team. By working in small teams to build a web application, they integrate the technical, communication, and collaboration skills built in previous courses.\n\nStudents build a multi-feature web application, either for a fictional client or an original idea of their own design. As they work together, they learn modern technical collaboration tools and practices. Topics covered include using version control for shared repository management, writing technical design documents, and conducting code reviews. They also practice project management skills by implementing the SCRUM framework, including sprint planning, reviews, and retrospectives. During each milestone, team members rotate taking on various roles including Scrum master, product owner, and technical lead. Throughout the course, students will also apply and refine the emotional intelligence, team development, and leadership frameworks previously learned. By the end of the course, students should understand and value the various roles within a software product development team, and be able to participate effectively on a product team. \n\nThere are no scheduled class sessions. Teams will submit their sprint retrospectives for feedback from peers and faculty.  The course culminates in a showcase where students present their final project to the Kibo community and external stakeholders. ",
        "FL": true,
        "Type": "CS",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 3,
        "Contact Hours (W)": 30,
        "Self-Study Hours (W)": 20,
        "Assessment Hours (W)": 100,
        "Quarter (sample)": 3,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments: 40%\nGroup project and presentation: 40%\nFinal written reflection: 20%",
        "Hours and Format": "Synchronous class sessions per week:  none\n\nClass size during synchronous session:  N/A\n\nTime spent on prep/homework per week:10 hours\n\nTimetable format for the exam? N/A\n\nAny workplace experience that needs to be accredited? No",
        "Learning Outcomes": "By the end of the course, students will be able to: \nDevelop and deploy a web application in collaboration with a team\nTake on various project management roles within a software development team \nProvide meaningful technical and team feedback, and respond effectively to feedback",
        "Topics": "Advanced Git / version control \nSCRUM \nCode reviews \nTechnical design documents",
        "Reading List": "Core Reading List\n\nPiercy, C. (2019). Problem Solving in Teams and Groups. University of Kansas Libraries\nAtlassian (2021). The Agile Coach. \nChacon, S., Straub B. (2014). Pro Git. Apress. \n\nSupplementary Reading List\n\nLearn Git Branching tutorial ",
        "Prerequisites (Woolf)": "Web Application Development\nCollaborating for Impact",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 8,
        "Prefix (FL)": "CS",
        "Course Number (FL)": 209,
        "Prerequisites (FL)": [
            "rec0L0YKqCw2MXwGJ"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF008",
        "Course Code (FL)": "CS209",
        "prereqs": "Web Application Development"
    },
    {
        "Name": "Ethics of Tech",
        "ECTS Credits": 6,
        "Kind": "Skills",
        "Required": true,
        "Description": "This course examines the ethical questions that are emerging as a result of rapid technological change. It prepares students to become responsible technologists and provides a basis for ethical decision-making in their professional work.  It focuses on the promise and potential ethical dilemmas that result from the latest developments in computer science. Topics addressed include ethical decision-making, privacy and confidentiality, safety, manipulation/deception, and the impact of computers on society. Students are first introduced to a selection of classical ethical theories (e.g., Rights, Justice/Fairness, Utilitarian, etc.). These provide a vocabulary and framework for examining ethical issues in tech. These frameworks are applied to a selection of relevant ethical questions. Examples might include: should social media companies suppress the spread of fake news on their platforms? Is electronic privacy a right? Are there justifiable uses of state surveillance? Should AI be used to “predict” crime by police? What ethical codes should guide AI like self-driving cars? Students read case studies, write positioning papers, engage in facilitated discussions, and provide peer feedback.",
        "FL": true,
        "Type": "GenEd",
        "Woolf": true,
        "Credit Hours": 4,
        "Quarter (Woolf plan)": 9,
        "Contact Hours (W)": 50,
        "Self-Study Hours (W)": 70,
        "Assessment Hours (W)": 30,
        "Quarter (sample)": 9,
        "Supervised Placement Hours": 0,
        "Mode of Assessment": "Weekly assignments (50%) \nClass participation (25%)\nFinal project (25%) ",
        "Hours and Format": "Synchronous class sessions per week: 1 (90-min) per week\n\nClass size during synchronous session:  50 students\n\nTime spent on prep/homework per week:  6 hours\n\nTimetable format for the exam? No exam\n\nAny workplace experience that needs to be accredited? No?\n",
        "Learning Outcomes": "By the end of the course, students will be able to: \n\nIdentify ethical issues in computing, and distinguish ethical issues from technical, legal or commercial challenges\nApply frameworks for ethical decision-making to relevant computing scenarios and projects \nJustify and defend specific technical choices in computing, using sound ethical reasoning to defend their choices\nCreate software design and implementation proposals that reduce ethical risks",
        "Topics": "Ethical decision-making frameworks (MCAE, utilitarian, common good, etc.) \nEthical concerns in computing (privacy, security, fairness, transparency, manipulation/distrust, etc.) \nResponsibility\nNormative ethics\nEthical Engineering Frameworks",
        "Reading List": "Core reading list\n\nVallor, S.,  Raicu, I., Green B. (2020) Technology and Engineering Practice: Ethical Lenses to Look Through. The Markkula Center for Applied Ethics at Santa Clara University\nVallor, S. (2015). An Introduction to Software Engineering Ethics. The Markkula Center for Applied Ethics at Santa Clara University\nCode of Ethics (2018). The Association for Computing Machinery\n\nSupplemental reading list\nMarkkula Center for Applied Ethics, Technology Ethics Teaching Modules (introductions to software engineering ethics, data ethics, cybersecurity ethics, privacy)\nEthics for Designers (Toolkit from Delft University) \nBarbaro, Michael. “The Chinese Surveillance State, Part 1” (New York Times podcast). 6 May 2019.\nBryson, Joanna J. (2019). “The future of AI’s impact on society.” MIT Technology Review\nCossins, Daniel. (2017). “Discriminating Algorithms: 5 Times AI Showed Prejudice.” New Scientist\nLufkin, B. (2017). Why the biggest challenge facing AI is an ethical one. BBC\nRahwan, Iyad. (2017) “What Moral Decisions Should Driverless Cars Make?” TED talk",
        "Prerequisites (Woolf)": "KC002: Communicating for Success",
        "Sample Degree": true,
        "Prefix (Woolf)": "CSF",
        "Course Number (Woolf)": 9,
        "Prefix (FL)": "HSS",
        "Course Number (FL)": 200,
        "Prerequisites (FL)": [
            "recvt0zj7nfitJIQg"
        ],
        "Engagement hours (FL)": 40,
        "Prep hours (FL)": 80,
        "Course Code (Woolf)": "CSF009",
        "Course Code (FL)": "HSS200",
        "prereqs": "Communicating for Success - Writing"
    }
]